import { DendronConfig, DVault } from "@dendronhq/common-all";
export declare type PathExistBehavior = "delete" | "abort" | "continue";
export declare type WorkspaceServiceCreateOpts = {
    wsRoot: string;
    vaults: DVault[];
};
export declare type WorkspaceServiceOpts = {
    wsRoot: string;
};
export declare class WorkspaceService {
    static isNewVersionGreater({ oldVersion, newVersion, }: {
        oldVersion: string;
        newVersion: string;
    }): boolean;
    wsRoot: string;
    constructor({ wsRoot }: WorkspaceServiceOpts);
    get config(): DendronConfig;
    get configV2(): DendronConfig;
    get dendronRoot(): string;
    setConfig(config: DendronConfig): Promise<void>;
    setConfigV2(config: DendronConfig): Promise<void>;
    /**
     * Create vault files if it does not exist
     */
    createVault({ vault, noAddToConfig, }: {
        vault: DVault;
        noAddToConfig?: boolean;
    }): Promise<void>;
    /**
     * Not fully resolved vault
     */
    createVaultV2({ vault }: {
        vault: DVault;
    }): Promise<void>;
    /**
     * Remove vaults. Currently doesn't delete an yfiles
     * @param param0
     */
    removeVault({ vault }: {
        vault: DVault;
    }): Promise<void>;
    /**
     * Iinitialize workspace with root
     * @param opts
     */
    static createWorkspace(opts: WorkspaceServiceCreateOpts): Promise<WorkspaceService>;
    static createWorkspaceV2(opts: WorkspaceServiceCreateOpts): Promise<WorkspaceService>;
    cloneVault(opts: {
        vault: DVault;
    }): Promise<string>;
    writePort(port: number): void;
    writeMeta(opts: {
        version: string;
    }): void;
}
