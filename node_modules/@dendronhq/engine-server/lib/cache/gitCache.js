"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitCache = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const git_1 = require("../topics/git");
function getCacheFile(type, checkpoint) {
    return `.dendron.cache.${type}.${checkpoint}.json`;
}
class GitCache {
    constructor(opts) {
        this.opts = opts;
        this.git = new git_1.Git({ localUrl: opts.root });
        this.entries = {};
    }
    async get(key) {
        return lodash_1.default.get(this.entries, key, null);
    }
    async getAll(type, checkpoint) {
        const fpath = this.opts.root;
        if (!fs_extra_1.default.existsSync(fpath)) {
            return [];
        }
        const basename = getCacheFile(type, checkpoint);
        let notes = fs_extra_1.default.readJSONSync(path_1.default.join(fpath, basename));
        return notes;
    }
    async setAll(type, entries, checkpoint) {
        const fpath = this.opts.root;
        const basename = getCacheFile(type, checkpoint);
        return fs_extra_1.default.writeJSONSync(path_1.default.join(fpath, basename), entries);
    }
}
exports.GitCache = GitCache;
//# sourceMappingURL=gitCache.js.map