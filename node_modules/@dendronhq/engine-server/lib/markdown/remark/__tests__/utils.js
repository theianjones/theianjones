"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProcTests = exports.createEngine = exports.basicSetup = void 0;
const common_server_1 = require("@dendronhq/common-server");
const common_test_utils_1 = require("@dendronhq/common-test-utils");
const enginev2_1 = require("../../../enginev2");
const types_1 = require("../../types");
exports.basicSetup = async ({ wsRoot, vaults }) => {
    await common_test_utils_1.NoteTestUtilsV4.createNote({
        wsRoot,
        fname: "foo",
        body: "foo body",
        vault: vaults[0],
        props: { id: "foo-id" },
    });
};
exports.createEngine = ({ vaults, wsRoot }) => {
    const logger = common_server_1.createLogger("testLogger", "/tmp/engine-server.txt");
    const engine = enginev2_1.DendronEngineV2.createV3({ vaults, wsRoot, logger });
    return engine;
};
exports.createProcTests = (opts) => {
    const { name, setupFunc, verifyFuncDict } = opts;
    return Object.values(types_1.DendronASTDest).map((dest) => {
        const verifyFunc = verifyFuncDict[dest];
        return {
            name,
            dest,
            testCase: new common_test_utils_1.TestPresetEntryV4(async (presetOpts) => {
                const extra = await setupFunc({ ...presetOpts, extra: { dest } });
                return await verifyFunc({ ...presetOpts, extra });
            }, { preSetupHook: opts.preSetupHook }),
        };
    });
};
//# sourceMappingURL=utils.js.map