"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_test_utils_1 = require("@dendronhq/common-test-utils");
const lodash_1 = __importDefault(require("lodash"));
const types_1 = require("../../types");
const utils_1 = require("../../utils");
const utils_2 = require("./utils");
const IMAGE_LINK = `![alt-text](image-url.jpg)`;
const WITH_ASSET_PREFIX_UNDEFINED = utils_2.createProcTests({
    name: "asset_prefix undefined",
    setupFunc: async ({ engine, vaults, extra }) => {
        const proc = await utils_1.MDUtilsV4.procFull({
            engine,
            dest: extra.dest,
            vault: vaults[0],
            publishOpts: {
                assetsPrefix: undefined,
            },
        });
        const resp = proc.processSync(IMAGE_LINK);
        return { resp, proc };
    },
    verifyFuncDict: {
        [types_1.DendronASTDest.MD_REGULAR]: async ({ extra }) => {
            const { resp } = extra;
            expect(resp).toMatchSnapshot();
            return [
                {
                    actual: lodash_1.default.trim(resp.toString()),
                    expected: "![alt-text](image-url.jpg)",
                },
            ];
        },
        [types_1.DendronASTDest.HTML]: async ({ extra }) => {
            const { resp } = extra;
            expect(resp).toMatchSnapshot();
            return [
                {
                    actual: lodash_1.default.trim(resp.toString()),
                    expected: "![alt-text](image-url.jpg)",
                },
            ];
        },
        [types_1.DendronASTDest.MD_ENHANCED_PREVIEW]: async ({ extra }) => {
            const { resp } = extra;
            return [
                {
                    actual: lodash_1.default.trim(resp.toString()),
                    expected: "![alt-text](image-url.jpg)",
                },
            ];
        },
    },
    preSetupHook: common_test_utils_1.ENGINE_HOOKS.setupBasic,
});
const WITH_ASSET_PREFIX = utils_2.createProcTests({
    name: "asset_prefix",
    setupFunc: async ({ engine, vaults, extra }) => {
        const proc = await utils_1.MDUtilsV4.procFull({
            engine,
            dest: extra.dest,
            vault: vaults[0],
            publishOpts: {
                assetsPrefix: "bond/",
            },
        });
        const resp = proc.processSync(IMAGE_LINK);
        return { resp, proc };
    },
    verifyFuncDict: {
        [types_1.DendronASTDest.MD_REGULAR]: async ({ extra }) => {
            const { resp } = extra;
            expect(resp).toMatchSnapshot();
            return [
                {
                    actual: lodash_1.default.trim(resp.toString()),
                    expected: "![alt-text](image-url.jpg)",
                },
            ];
        },
        [types_1.DendronASTDest.HTML]: async ({ extra }) => {
            const { resp } = extra;
            expect(resp).toMatchSnapshot();
            return [
                {
                    actual: lodash_1.default.trim(resp.toString()),
                    expected: "![alt-text](bond/image-url.jpg)",
                },
            ];
        },
        [types_1.DendronASTDest.MD_ENHANCED_PREVIEW]: async ({ extra }) => {
            const { resp } = extra;
            return [
                {
                    actual: lodash_1.default.trim(resp.toString()),
                    expected: "![alt-text](image-url.jpg)",
                },
            ];
        },
    },
    preSetupHook: common_test_utils_1.ENGINE_HOOKS.setupBasic,
});
const ALL_TEST_CASES = [...WITH_ASSET_PREFIX, ...WITH_ASSET_PREFIX_UNDEFINED];
describe("html dest", () => {
    test.each(ALL_TEST_CASES.map((ent) => [`${ent.dest}: ${ent.name}`, ent.testCase]))("%p", async (_key, testCase) => {
        await common_test_utils_1.runEngineTestV4(testCase.testFunc, {
            expect,
            createEngine: utils_2.createEngine,
            preSetupHook: testCase.preSetupHook,
        });
    });
});
//# sourceMappingURL=utils.spec.js.map