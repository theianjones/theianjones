/**
 * class Renderer
 **/
/**
 * DEPRECATE
 */
import * as _Renderer from "markdown-it/lib/renderer";
import Token from "markdown-it/lib/token";
import MarkdownIt from "markdown-it";
declare type RenderRuleRecord = _Renderer.RenderRuleRecord;
export declare class MDRenderer {
    rules: RenderRuleRecord;
    constructor();
    /**
     * Renderer.renderAttrs(token) -> String
     *
     * Render token attributes to string.
     **/
    renderAttrs(token: Token): string;
    /**
     * Renderer.renderToken(tokens, idx, options) -> String
     * - tokens (Array): list of tokens
     * - idx (Numbed): token index to render
     * - options (Object): params of parser instance
     *
     * Default token renderer. Can be overriden by custom function
     * in [[Renderer#rules]].
     **/
    renderToken(tokens: Token[], idx: number, _options: MarkdownIt.Options): string;
    /**
     * Renderer.renderInline(tokens, options, env) -> String
     * - tokens (Array): list on block tokens to renter
     * - options (Object): params of parser instance
     * - env (Object): additional data from parsed input (references, for example)
     *
     * The same as [[Renderer.render]], but for single token of `inline` type.
     **/
    renderInline(tokens: Token[], options: MarkdownIt.Options, env: any): string;
    /** internal
     * Renderer.renderInlineAsText(tokens, options, env) -> String
     * - tokens (Array): list on block tokens to renter
     * - options (Object): params of parser instance
     * - env (Object): additional data from parsed input (references, for example)
     *
     * Special kludge for image `alt` attributes to conform CommonMark spec.
     * Don't try to use it! Spec requires to show `alt` content with s
     * instead of simple escaping.
     **/
    renderInlineAsText(tokens: Token[], options: MarkdownIt.Options, env: any): string;
    /**
     * Renderer.render(tokens, options, env) -> String
     * - tokens (Array): list on block tokens to renter
     * - options (Object): params of parser instance
     * - env (Object): additional data from parsed input (references, for example)
     *
     * Takes token stream and generates HTML. Probably, you will never need to call
     * this method directly.
     **/
    render(tokens: Token[], options: MarkdownIt.Options, env: any): string;
}
export {};
