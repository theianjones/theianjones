"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceRefs = exports.handleMissingWikiLink = void 0;
const common_all_1 = require("@dendronhq/common-all");
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_1 = __importDefault(require("lodash"));
const unist_util_visit_1 = __importDefault(require("unist-util-visit"));
function handleMissingWikiLink(opts) {
    const { data, scratch, msg } = opts;
    data.note = { id: "/404.html" };
    delete data["prefix"];
    // add id to bad links
    if (scratch) {
        fs_extra_1.default.appendFileSync(scratch, [data.permalink, msg].join(":") + "\n", {
            encoding: "utf8",
        });
    }
}
exports.handleMissingWikiLink = handleMissingWikiLink;
/**
 * Used in refactoring, renaming and publishing
 */
function replaceRefs(options) {
    const { imageRefPrefix, wikiLink2Md, wikiLink2Html, wikiLinkPrefix, wikiLinkUseId, engine, missingLinkBehavior, forNoteRefInPreview, forNoteRefInSite, scratch, } = lodash_1.default.defaults(options, {
        wikiLinkPrefix: false,
        wikiLink2Html: false,
        missingLinkBehavior: "404",
        forNoteRefInPreview: false,
        forNoteRefInSite: true,
    });
    function transformer(tree, _file) {
        unist_util_visit_1.default(tree, (node) => {
            if (node.type === "image") {
                if (imageRefPrefix) {
                    node.url = imageRefPrefix + node.url;
                }
            }
            if (node.type === "wikiLink") {
                const data = node.data;
                if (wikiLink2Md) {
                    data.toMd = true;
                }
                if (forNoteRefInPreview) {
                    data.forNoteRefInPreview = true;
                }
                if (forNoteRefInSite) {
                    data.forNoteRefInSite = true;
                }
                if (wikiLink2Html) {
                    data.toHTML = true;
                }
                if (wikiLinkPrefix) {
                    data.prefix = wikiLinkPrefix;
                }
                // use id-based link
                if (wikiLinkUseId) {
                    data.useId = true;
                    if (!engine) {
                        throw Error(`need engine when wikiLinkUseId is set`);
                    }
                    const notes = common_all_1.NoteUtilsV2.getNotesByFname({
                        fname: data.permalink,
                        notes: engine.notes,
                    });
                    let errorMsg;
                    if (notes.length < 1) {
                        errorMsg = `no note found for following link: ${data.permalink}`;
                    }
                    else if (notes.length > 1) {
                        errorMsg = `multiple notes found for following link: ${data.permalink}`;
                    }
                    else {
                        data.note = notes[0];
                    }
                    // check for error
                    if (lodash_1.default.isUndefined(data.note)) {
                        if (missingLinkBehavior === "404") {
                            handleMissingWikiLink({ data, scratch, msg: errorMsg });
                        }
                        else {
                            throw new common_all_1.DendronError({ msg: errorMsg });
                        }
                    }
                }
            }
        });
        return tree;
    }
    return transformer;
}
exports.replaceRefs = replaceRefs;
//# sourceMappingURL=replaceRefs.js.map