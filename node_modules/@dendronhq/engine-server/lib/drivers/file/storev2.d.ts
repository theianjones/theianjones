import { DendronError, DEngineDeleteSchemaRespV2, DEngineInitRespV2, DEngineInitSchemaRespV2, DLink, DStoreV2, DVault, EngineDeleteOptsV2, EngineUpdateNodesOptsV2, EngineWriteOptsV2, NotePropsDictV2, NotePropsV2, RenameNoteOptsV2, RenameNotePayload, SchemaModuleDictV2, SchemaModulePropsV2, StoreDeleteNoteResp, WriteNoteResp } from "@dendronhq/common-all";
import { DLogger } from "@dendronhq/common-server";
declare type BulkAddNoteOpts = {
    notes: NotePropsV2[];
};
declare type FileMetaV2 = {
    prefix: string;
    fpath: string;
};
export declare class ParserBaseV2 {
    opts: {
        store: DStoreV2;
        logger: DLogger;
    };
    constructor(opts: {
        store: DStoreV2;
        logger: DLogger;
    });
    get logger(): DLogger;
}
export declare class NoteParserV2 extends ParserBaseV2 {
    opts: {
        store: DStoreV2;
        cache: NotePropsCacheV2;
        logger: DLogger;
    };
    cache: NotePropsCacheV2;
    constructor(opts: {
        store: DStoreV2;
        cache: NotePropsCacheV2;
        logger: DLogger;
    });
    parseFile(fpath: string[], vault: DVault): Promise<NotePropsV2[]>;
    parseNoteProps(opts: {
        fileMeta: FileMetaV2;
        notesByFname?: NotePropsDictV2;
        parents?: NotePropsV2[];
        addParent: boolean;
        createStubs?: boolean;
        vault: DVault;
    }): NotePropsV2[];
    parse(fpaths: string[], vault: DVault): Promise<NotePropsV2[]>;
}
export declare class SchemaParserV2 extends ParserBaseV2 {
    parseFile(fpath: string, root: DVault): SchemaModulePropsV2;
    parse(fpaths: string[], vault: DVault): Promise<{
        schemas: SchemaModulePropsV2[];
        errors: DendronError[] | null;
    }>;
}
declare type NotePropsCacheV2 = {};
export declare class FileStorageV2 implements DStoreV2 {
    vaults: string[];
    notes: NotePropsDictV2;
    schemas: SchemaModuleDictV2;
    notesCache: NotePropsCacheV2;
    logger: DLogger;
    links: DLink[];
    vaultsv3: DVault[];
    wsRoot: string;
    configRoot: string;
    constructor(props: {
        wsRoot: string;
        logger: DLogger;
        vaultsv3: DVault[];
    });
    init(): Promise<DEngineInitRespV2>;
    deleteNote(id: string, opts?: EngineDeleteOptsV2): Promise<StoreDeleteNoteResp>;
    deleteSchema(id: string, opts?: EngineDeleteOptsV2): Promise<DEngineDeleteSchemaRespV2>;
    loadNotesCache(): NotePropsCacheV2;
    initSchema(): Promise<DEngineInitSchemaRespV2>;
    _initSchema(vault: DVault): Promise<{
        data: SchemaModulePropsV2[];
        errors: any[];
    }>;
    initNotes(): Promise<NotePropsV2[]>;
    _addBacklinks({ notesWithLinks, allNotes, }: {
        notesWithLinks: NotePropsV2[];
        allNotes: NotePropsV2[];
    }): Promise<Promise<(void[] | undefined)[]>[]>;
    _initNotes(vault: DVault): Promise<NotePropsV2[]>;
    bulkAddNotes(opts: BulkAddNoteOpts): Promise<void[]>;
    renameNote(opts: RenameNoteOptsV2): Promise<RenameNotePayload>;
    updateNote(note: NotePropsV2, _opts?: EngineUpdateNodesOptsV2): Promise<void>;
    updateSchema(schemaModule: SchemaModulePropsV2): Promise<void>;
    _writeNewNote({ note, maybeNote, opts, }: {
        note: NotePropsV2;
        maybeNote?: NotePropsV2;
        opts?: EngineWriteOptsV2;
    }): Promise<NotePropsV2[]>;
    writeNote(note: NotePropsV2, opts?: EngineWriteOptsV2): Promise<WriteNoteResp>;
    writeSchema(schemaModule: SchemaModulePropsV2): Promise<void>;
}
export {};
