"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DConfig = void 0;
const common_all_1 = require("@dendronhq/common-all");
const common_server_1 = require("@dendronhq/common-server");
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
class DConfig {
    static configPath(configRoot) {
        return path_1.default.join(configRoot, common_all_1.CONSTANTS.DENDRON_CONFIG_FILE);
    }
    static genDefaultConfig() {
        return {
            version: 1,
            vaults: [],
            site: {
                copyAssets: true,
                siteHierarchies: ["root"],
                siteRootDir: "docs",
                siteProtocol: "https",
                usePrettyRefs: true,
            },
        };
    }
    static getOrCreate(dendronRoot) {
        const configPath = DConfig.configPath(dendronRoot);
        let config;
        if (!fs_extra_1.default.existsSync(configPath)) {
            config = DConfig.genDefaultConfig();
            common_server_1.writeYAML(configPath, config);
        }
        else {
            config = common_server_1.readYAML(configPath);
        }
        return config;
    }
    /**
     * fill in defaults
     */
    static cleanSiteConfig(config) {
        let out = lodash_1.default.defaults(config, {
            copyAssets: true,
            usePrettyRefs: true,
            siteNotesDir: "notes",
            siteProtocol: "https",
            siteFaviconPath: "favicon.ico",
            gh_edit_link: true,
            gh_edit_link_text: "Edit this page on GitHub",
            gh_edit_branch: "master",
            gh_root: "docs/",
            gh_edit_view_mode: "edit",
            writeStubs: true,
        });
        let { siteRootDir, siteHierarchies, siteIndex } = out;
        if (!siteRootDir) {
            throw `siteRootDir is undefined`;
        }
        if (lodash_1.default.size(siteHierarchies) < 1) {
            throw `siteHiearchies must have at least one hiearchy`;
        }
        out.siteIndex = siteIndex || siteHierarchies[0];
        return out;
    }
    static writeConfig({ wsRoot, config, }) {
        const configPath = DConfig.configPath(wsRoot);
        return common_server_1.writeYAML(configPath, config);
    }
}
exports.DConfig = DConfig;
//# sourceMappingURL=config.js.map