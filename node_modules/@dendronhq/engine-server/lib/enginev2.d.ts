import { ConfigWriteOpts, DendronConfig, DEngineClientV2, DEngineDeleteSchemaRespV2, DEngineInitRespV2, DEngineMode, DEngineV2, DLink, DNodeTypeV2, DStoreV2, DVault, EngineDeleteOptsV2, EngineUpdateNodesOptsV2, EngineWriteOptsV2, GetNoteOptsV2, GetNotePayloadV2, NoteChangeEntry, NotePropsDictV2, NotePropsV2, QueryNotesOpts, RenameNoteOptsV2, RenameNotePayload, RespV2, SchemaModuleDictV2, SchemaModulePropsV2, SchemaQueryResp, WorkspaceOpts, WriteNoteResp } from "@dendronhq/common-all";
import { DLogger } from "@dendronhq/common-server";
import { FuseEngine } from "./fuseEngine";
declare type DendronEngineOptsV2 = {
    wsRoot: string;
    vaultsv3: DVault[];
    forceNew?: boolean;
    store?: any;
    mode?: DEngineMode;
    logger?: DLogger;
};
declare type DendronEnginePropsV2 = Required<DendronEngineOptsV2>;
export declare class DendronEngineV2 implements DEngineV2 {
    wsRoot: string;
    vaults: string[];
    store: DStoreV2;
    protected props: DendronEnginePropsV2;
    logger: DLogger;
    fuseEngine: FuseEngine;
    links: DLink[];
    vaultsv3: DVault[];
    configRoot: string;
    static _instance: DendronEngineV2 | undefined;
    constructor(props: DendronEnginePropsV2);
    static createV3({ vaults, wsRoot, logger, }: WorkspaceOpts & {
        logger?: DLogger;
    }): DendronEngineV2;
    static instance({ vaults, wsRoot }: {
        vaults: DVault[];
        wsRoot: string;
    }): DendronEngineV2;
    get notes(): NotePropsDictV2;
    get schemas(): SchemaModuleDictV2;
    /**
     * Does not throw error but returns it
     */
    init(): Promise<DEngineInitRespV2>;
    deleteNote(id: string, opts?: EngineDeleteOptsV2): ReturnType<DEngineClientV2["deleteNote"]>;
    deleteSchema(id: string, opts?: EngineDeleteOptsV2): Promise<DEngineDeleteSchemaRespV2>;
    getNoteByPath({ npath, createIfNew, vault, }: GetNoteOptsV2): Promise<RespV2<GetNotePayloadV2>>;
    getConfig(): Promise<{
        error: null;
        data: DendronConfig;
    }>;
    getSchema(id: string): Promise<RespV2<SchemaModulePropsV2>>;
    queryNotesSync({ qs, }: {
        qs: string;
    }): ReturnType<DEngineClientV2["queryNotesSync"]>;
    querySchema(queryString: string): Promise<SchemaQueryResp>;
    queryNotes(opts: QueryNotesOpts): ReturnType<DEngineClientV2["queryNotes"]>;
    sync(): Promise<any>;
    refreshNotesV2(notes: NoteChangeEntry[]): Promise<void>;
    renameNote(opts: RenameNoteOptsV2): Promise<RespV2<RenameNotePayload>>;
    updateNote(note: NotePropsV2, opts?: EngineUpdateNodesOptsV2): Promise<void>;
    updateIndex(mode: DNodeTypeV2): Promise<void>;
    updateSchema(schemaModule: SchemaModulePropsV2): Promise<void>;
    writeConfig(opts: ConfigWriteOpts): ReturnType<DEngineV2["writeConfig"]>;
    writeNote(note: NotePropsV2, opts?: EngineWriteOptsV2): Promise<WriteNoteResp>;
    writeSchema(schema: SchemaModulePropsV2): Promise<void>;
}
export declare const createEngine: ({ vaults, wsRoot }: WorkspaceOpts) => DendronEngineV2;
export {};
