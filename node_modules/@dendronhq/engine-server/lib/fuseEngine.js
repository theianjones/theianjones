"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FuseEngine = void 0;
const common_all_1 = require("@dendronhq/common-all");
const fuse_js_1 = __importDefault(require("fuse.js"));
const lodash_1 = __importDefault(require("lodash"));
function createFuse(initList, opts) {
    const options = {
        shouldSort: true,
        threshold: opts.exactMatch ? 0.0 : 0.5,
        location: 0,
        distance: 50,
        maxPatternLength: 32,
        minMatchCharLength: 2,
        keys: ["fname"],
        useExtendedSearch: true,
        includeScore: true,
    };
    if (opts.preset === "schema") {
        options.keys = ["fname", "id"];
    }
    const fuse = new fuse_js_1.default(initList, options);
    return fuse;
}
class FuseEngine {
    constructor(opts) {
        this.notesIndex = createFuse([], {
            exactMatch: opts.mode === "exact",
            preset: "note",
        });
        this.schemaIndex = createFuse([], {
            exactMatch: opts.mode === "exact",
            preset: "schema",
        });
    }
    async querySchema({ qs }) {
        let items;
        if (qs === "") {
            const results = this.schemaIndex.search("root");
            items = [results[0].item];
        }
        else if (qs === "*") {
            // @ts-ignore
            items = this.schemaIndex._docs;
        }
        else {
            const results = this.schemaIndex.search(qs);
            items = lodash_1.default.map(results, (resp) => resp.item);
        }
        return items;
    }
    queryNote({ qs }) {
        let items;
        if (qs === "") {
            const results = this.notesIndex.search("root");
            items = [results[0].item];
        }
        else if (qs === "*") {
            // @ts-ignore
            items = this.notesIndex._docs;
        }
        else {
            const results = this.notesIndex.search(qs);
            items = lodash_1.default.map(results, (resp) => resp.item);
        }
        return items;
    }
    async updateSchemaIndex(schemas) {
        this.schemaIndex.setCollection(lodash_1.default.map(lodash_1.default.values(schemas), (ent) => common_all_1.SchemaUtilsV2.getModuleRoot(ent)));
    }
    async updateNotesIndex(notes) {
        this.notesIndex.setCollection(lodash_1.default.map(notes, ({ fname, title, id, vault }, _key) => ({
            fname,
            id,
            title,
            vault,
        })));
    }
    async removeNoteFromIndex(note) {
        this.notesIndex.remove((doc) => {
            // FIXME: can be undefined, dunno why
            if (!doc) {
                return false;
            }
            return doc.id === note.id;
        });
    }
    async removeSchemaFromIndex(smod) {
        this.schemaIndex.remove((doc) => {
            // FIXME: can be undefined, dunno why
            if (!doc) {
                return false;
            }
            return doc.id === common_all_1.SchemaUtilsV2.getModuleRoot(smod).id;
        });
    }
}
exports.FuseEngine = FuseEngine;
//# sourceMappingURL=fuseEngine.js.map