import { ConfigGetPayload, ConfigWriteOpts, DEngineClientV2, DEngineDeleteSchemaRespV2, DEngineInitRespV2, DEngineV2, DLink, DNodePropsV2, DVault, EngineDeleteNoteResp, EngineDeleteOptsV2, EngineUpdateNodesOptsV2, EngineWriteOptsV2, GetNoteOptsV2, GetNotePayloadV2, NoteChangeEntry, NotePropsDictV2, NotePropsV2, QueryNotesOpts, RenameNoteOptsV2, RenameNotePayload, RespV2, SchemaModuleDictV2, SchemaModulePropsV2, SchemaQueryResp, WriteNoteResp } from "@dendronhq/common-all";
import { DendronAPI, DLogger } from "@dendronhq/common-server";
import { FileStorageV2 } from "./drivers/file/storev2";
import { FuseEngine } from "./fuseEngine";
import { HistoryService } from "./history";
declare type DendronEngineClientOpts = {
    vaults: string[];
    ws: string;
};
export declare class DendronEngineClient implements DEngineClientV2 {
    notes: NotePropsDictV2;
    wsRoot: string;
    schemas: SchemaModuleDictV2;
    vaults: string[];
    links: DLink[];
    ws: string;
    fuseEngine: FuseEngine;
    api: DendronAPI;
    vaultsv3: DVault[];
    configRoot: string;
    history?: HistoryService;
    logger: DLogger;
    store: FileStorageV2;
    static create({ port, vaults, ws, history, }: {
        port: number | string;
        history?: HistoryService;
    } & DendronEngineClientOpts): DendronEngineClient;
    static getPort({ wsRoot }: {
        wsRoot: string;
    }): number;
    constructor({ api, vaults, ws, history, logger, }: {
        api: DendronAPI;
        vaults: string[];
        ws: string;
        history?: HistoryService;
        logger?: DLogger;
    });
    /**
     * Load all nodes
     */
    init(): Promise<DEngineInitRespV2>;
    deleteNote(id: string, opts?: EngineDeleteOptsV2): Promise<EngineDeleteNoteResp>;
    deleteSchema(id: string, opts?: EngineDeleteOptsV2): Promise<DEngineDeleteSchemaRespV2>;
    getConfig(): Promise<RespV2<ConfigGetPayload>>;
    getNoteByPath(opts: GetNoteOptsV2): Promise<RespV2<GetNotePayloadV2>>;
    queryNote(opts: Parameters<DEngineClientV2["queryNotes"]>[0]): Promise<NotePropsV2[]>;
    queryNotes(opts: QueryNotesOpts): Promise<{
        data: DNodePropsV2<any, any>[];
        error: null;
    }>;
    buildNotes(): Promise<void>;
    queryNotesSync({ qs, vault }: {
        qs: string;
        vault?: DVault;
    }): {
        error: null;
        data: DNodePropsV2<any, any>[];
    };
    refreshNotes(notes: NotePropsV2[]): Promise<void>;
    refreshNotesV2(notes: NoteChangeEntry[]): Promise<void>;
    refreshSchemas(smods: SchemaModulePropsV2[]): Promise<void>;
    renameNote(opts: RenameNoteOptsV2): Promise<RespV2<RenameNotePayload>>;
    sync(): Promise<DEngineInitRespV2>;
    updateNote(note: NotePropsV2, opts?: EngineUpdateNodesOptsV2): Promise<void>;
    writeNote(note: NotePropsV2, opts?: EngineWriteOptsV2): Promise<WriteNoteResp>;
    getSchema(_qs: string): Promise<RespV2<SchemaModulePropsV2>>;
    querySchema(qs: string): Promise<SchemaQueryResp>;
    updateSchema(schema: SchemaModulePropsV2): Promise<void>;
    writeConfig(opts: ConfigWriteOpts): ReturnType<DEngineV2["writeConfig"]>;
    writeSchema(schema: SchemaModulePropsV2): Promise<void>;
}
export {};
