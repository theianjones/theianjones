import { BasePodExecuteOpts, DEngineClientV2, DPod, DVault, NotePropsV2, PodConfig } from "@dendronhq/common-all";
import { DLogger } from "@dendronhq/common-server";
import { URI } from "vscode-uri";
import { PodKind } from "./types";
export declare abstract class BasePod<TConfig> implements DPod<TConfig> {
    L: DLogger;
    constructor();
    abstract config: PodConfig[];
    abstract execute(opts: BasePodExecuteOpts<TConfig>): Promise<any>;
    getPodPath({ fpath, wsRoot, pathKey, }: {
        fpath?: string;
        wsRoot: string;
        pathKey: string;
    }): URI;
}
export declare type ExportPodCleanOpts<TConfig> = {
    config: TConfig & ExportPodCleanConfig;
    wsRoot: string;
};
export declare type ExportPodRawConfig = {
    dest?: string;
    includeBody?: boolean;
    includeStubs?: boolean;
};
export declare type ExportPodCleanConfig = {
    dest: URI;
    includeBody: boolean;
    includeStubs: boolean;
};
export declare type ExportPodPrepareOpts<TConfig extends ExportPodCleanConfig> = {
    engine: DEngineClientV2;
    config: TConfig;
};
export declare type ExportPodPlantOpts<TConfig> = {
    wsRoot: string;
    vaults: DVault[];
    engine: DEngineClientV2;
    config: TConfig;
};
export declare type ExportPodExecuteOpts<TConfig> = BasePodExecuteOpts<TConfig & ExportPodRawConfig>;
export declare type ImportPodRawConfig = {
    src?: string;
};
export declare type ImportPodCleanConfig = {
    src: URI;
};
export declare type ImportPodCleanOpts<TConfig> = {
    config: TConfig & ImportPodCleanConfig;
    wsRoot: string;
};
export declare type ImportPodPlantOpts<TConfig> = {
    wsRoot: string;
    vaults: DVault[];
    engine: DEngineClientV2;
    config: TConfig;
};
export declare type ImportPodExecuteOpts<TConfig> = BasePodExecuteOpts<TConfig & ImportPodRawConfig>;
export declare abstract class ExportPod<TConfigRaw extends ExportPodRawConfig, TConfigClean extends ExportPodCleanConfig, TOutput = any> extends BasePod<TConfigRaw & ExportPodRawConfig> {
    static kind: PodKind;
    get config(): PodConfig[];
    abstract clean(opts: ExportPodCleanOpts<TConfigRaw>): Promise<TConfigClean>;
    abstract plant(opts: ExportPodPlantOpts<TConfigClean>): Promise<any>;
    cleanExportConfig({ wsRoot, config, }: {
        config: ExportPodRawConfig;
        wsRoot: string;
    }): ExportPodCleanConfig;
    preareNotesForExport({ config, notes, }: {
        config: ExportPodCleanConfig;
        notes: NotePropsV2[];
    }): import("@dendronhq/common-all").DNodePropsV2<any, any>[];
    execute(opts: ExportPodExecuteOpts<TConfigRaw>): Promise<TOutput>;
}
export declare abstract class ImportPod<TConfigRaw, TConfigClean extends ImportPodCleanConfig> extends BasePod<TConfigRaw & ImportPodRawConfig> {
    static kind: PodKind;
    get config(): PodConfig[];
    abstract clean(opts: ImportPodCleanOpts<TConfigRaw>): Promise<TConfigClean>;
    abstract plant(opts: ImportPodPlantOpts<TConfigClean>): Promise<any>;
    cleanImportConfig({ wsRoot, config, }: {
        config: ImportPodRawConfig;
        wsRoot: string;
    }): ImportPodCleanConfig;
    execute(opts: ImportPodExecuteOpts<TConfigRaw>): Promise<any>;
}
export declare type PublishPodRawConfig = {
    fname: string;
    dest?: string;
    vault: string;
};
export declare type PublishPodCleanConfig = {
    fname: string;
    dest: URI | "stdout";
    vault: DVault;
};
export declare type PublishPodCleanOpts<TConfig> = {
    config: TConfig & PublishPodCleanConfig;
    wsRoot: string;
};
export declare type PublishPodPlantOpts = {};
export declare type PublishPodExecuteOpts<TConfigRaw> = BasePodExecuteOpts<TConfigRaw> & {
    fname: string;
};
export declare abstract class PublishPod<TConfigRaw extends PublishPodRawConfig = PublishPodRawConfig, TConfigClean extends PublishPodCleanConfig = PublishPodCleanConfig> extends BasePod<TConfigRaw & PublishPodRawConfig> {
    static kind: PodKind;
    get config(): PodConfig[];
    clean(opts: PublishPodCleanOpts<TConfigRaw>): Promise<TConfigClean>;
    abstract plant(opts: BasePodExecuteOpts<TConfigClean>): Promise<any>;
    cleanPublishConfig({ wsRoot, config, vaults, }: {
        config: PublishPodRawConfig;
        wsRoot: string;
        vaults: DVault[];
    }): PublishPodCleanConfig;
    execute(opts: BasePodExecuteOpts<TConfigRaw>): Promise<any>;
}
export { DPod };
