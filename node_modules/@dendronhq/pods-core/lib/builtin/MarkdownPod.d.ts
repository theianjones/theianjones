import { BasePodExecuteOpts, NotePropsV2 } from "@dendronhq/common-all";
import { Item } from "klaw";
import { ImportPod, ImportPodCleanConfig, ImportPodCleanOpts, ImportPodPlantOpts, ImportPodRawConfig, PublishPod, PublishPodCleanConfig } from "../basev2";
export declare type MarkdownImportPodRawConfig = ImportPodRawConfig & {
    concatenate: boolean;
    destName?: string;
};
export declare type MarkdownImportPodCleanConfig = ImportPodCleanConfig & {
    concatenate: boolean;
    destName?: string;
};
export declare type MarkdownImportPodPlantOpts = ImportPodPlantOpts<MarkdownImportPodCleanConfig>;
export declare type MarkdownImportPodResp = any[];
declare type DItem = Item & {
    data?: any;
    body?: string;
    entries: DItem[];
};
declare type HierarichalDict = {
    [k: string]: NotePropsV2[];
};
export declare class MarkdownImportPod extends ImportPod<MarkdownImportPodRawConfig, MarkdownImportPodCleanConfig> {
    static id: string;
    static description: string;
    _collectItems(root: string): Promise<DItem[]>;
    _prepareItems(items: DItem[]): Promise<{
        engineFileDict: {
            [k: string]: DItem;
        };
        assetFileDict: {
            [k: string]: DItem;
        };
    }>;
    _files2HierarichalDict(opts: {
        files: DItem[];
        src: string;
        vaultPath: string;
        wsRoot: string;
    }): HierarichalDict;
    hDict2Notes(hdict: HierarichalDict): NotePropsV2[];
    clean(opts: ImportPodCleanOpts<MarkdownImportPodRawConfig>): Promise<ImportPodRawConfig & {
        concatenate: boolean;
        destName?: string | undefined;
    } & ImportPodCleanConfig>;
    plant(opts: MarkdownImportPodPlantOpts): Promise<MarkdownImportPodResp>;
}
export declare class MarkdownPublishPod extends PublishPod {
    static id: string;
    static description: string;
    plant(opts: BasePodExecuteOpts<PublishPodCleanConfig>): Promise<any>;
}
export {};
