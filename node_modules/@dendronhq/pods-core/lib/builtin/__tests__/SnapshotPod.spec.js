"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_test_utils_1 = require("@dendronhq/common-test-utils");
const engine_server_1 = require("@dendronhq/engine-server");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const SnapshotPod_1 = require("../SnapshotPod");
describe("SnapshotPodExport", () => {
    let vaults;
    let wsRoot;
    let engine;
    beforeEach(async () => {
        ({ wsRoot, vaults } = await common_test_utils_1.EngineTestUtilsV2.setupWS({
            initDirCb: async (vaultDir) => {
                await common_test_utils_1.NodeTestPresetsV2.createOneNoteOneSchemaPresetWithBody({
                    vaultDir,
                });
            },
        }));
        engine = engine_server_1.DendronEngineV2.createV3({
            vaults: vaults.map((fsPath) => ({ fsPath })),
            wsRoot,
        });
        await engine.init();
    });
    test("config", async () => {
        const config = new SnapshotPod_1.SnapshotExportPod().config;
        expect(config).toMatchSnapshot();
    });
    test("with custom", async () => {
        let customSnapshotRootPath = path_1.default.join(wsRoot, "custom");
        const pod = new SnapshotPod_1.SnapshotExportPod();
        const { snapshotDirPath } = await pod.execute({
            config: {
                dest: customSnapshotRootPath,
            },
            engine,
            vaults: vaults.map((ent) => ({ fsPath: ent })),
            wsRoot,
        });
        const snapshotDir = fs_extra_1.default.readdirSync(snapshotDirPath);
        expect(path_1.default.dirname(snapshotDirPath)).toEqual(customSnapshotRootPath);
        expect(snapshotDir).toMatchSnapshot();
        // backup vault
        const vaultPath = path_1.default.join(snapshotDirPath, "vault");
        const snapshotVault = fs_extra_1.default.readdirSync(vaultPath);
        expect(snapshotVault).toMatchSnapshot();
        expect(snapshotVault.length).toEqual(6);
        // copy assets
        const assetsDir = fs_extra_1.default.readdirSync(path_1.default.join(vaultPath, "assets"));
        expect(assetsDir).toEqual(["foo.jpg"]);
    });
    test("with defaults", async () => {
        const pod = new SnapshotPod_1.SnapshotExportPod();
        const { snapshotDirPath } = await pod.execute({
            config: {},
            engine,
            vaults: vaults.map((ent) => ({ fsPath: ent })),
            wsRoot,
        });
        await common_test_utils_1.NodeTestPresetsV2.runJestHarness({
            opts: {
                wsRoot,
                snapshotDirPath,
            },
            results: common_test_utils_1.PODS_CORE.SNAPSHOT.EXPORT.DEFAULTS.results,
            expect,
        });
    });
    test("empty ignore", async () => {
        let dest = path_1.default.join(wsRoot, "snapshot");
        const pod = new SnapshotPod_1.SnapshotExportPod();
        fs_extra_1.default.ensureDirSync(dest);
        const { snapshotDirPath } = await pod.execute({
            config: {
                dest,
                ignore: "",
            },
            engine,
            vaults: vaults.map((ent) => ({ fsPath: ent })),
            wsRoot,
        });
        const snapshotDir = fs_extra_1.default.readdirSync(snapshotDirPath);
        expect(snapshotDir).toMatchSnapshot();
        // backup vault
        const vaultPath = path_1.default.join(snapshotDirPath, "vault");
        const snapshotVault = fs_extra_1.default.readdirSync(vaultPath);
        expect(snapshotVault).toMatchSnapshot();
        expect(snapshotVault.length).toEqual(7);
        // copy assets
        const assetsDir = fs_extra_1.default.readdirSync(path_1.default.join(vaultPath, "assets"));
        expect(assetsDir).toEqual(["foo.jpg"]);
    });
    test("ignore foo", async () => {
        let dest = path_1.default.join(wsRoot, "snapshot");
        const pod = new SnapshotPod_1.SnapshotExportPod();
        fs_extra_1.default.ensureDirSync(dest);
        const { snapshotDirPath } = await pod.execute({
            config: {
                dest,
                ignore: "foo*",
            },
            engine,
            vaults: vaults.map((ent) => ({ fsPath: ent })),
            wsRoot,
        });
        const snapshotDir = fs_extra_1.default.readdirSync(snapshotDirPath);
        expect(snapshotDir).toMatchSnapshot();
        // backup vault
        const vaultPath = path_1.default.join(snapshotDirPath, "vault");
        const snapshotVault = fs_extra_1.default.readdirSync(vaultPath);
        expect(snapshotVault).toMatchSnapshot();
        expect(snapshotVault.length).toEqual(4);
        // copy assets
        const assetsDir = fs_extra_1.default.readdirSync(path_1.default.join(vaultPath, "assets"));
        expect(assetsDir).toEqual(["foo.jpg"]);
    });
});
describe("SnapshotPodImport", () => {
    let vaults;
    let wsRoot;
    let engine;
    let snapshotDirPath;
    beforeEach(async () => {
        ({ wsRoot, vaults } = await common_test_utils_1.EngineTestUtilsV2.setupWS({}));
        engine = engine_server_1.DendronEngineV2.createV3({
            vaults: vaults.map((fsPath) => ({ fsPath })),
            wsRoot,
        });
        let dest = path_1.default.join(wsRoot, "snapshot");
        fs_extra_1.default.ensureDirSync(dest);
        const createSnapshot = async () => {
            // setp for export
            const { wsRoot, vaults } = await common_test_utils_1.EngineTestUtilsV2.setupWS({
                initDirCb: async (vaultDir) => {
                    await common_test_utils_1.NodeTestPresetsV2.createOneNoteOneSchemaPresetWithBody({
                        vaultDir,
                    });
                },
            });
            const pod = new SnapshotPod_1.SnapshotExportPod();
            const resp = await pod.execute({
                config: {
                    dest,
                },
                engine,
                vaults: vaults.map((ent) => ({ fsPath: ent })),
                wsRoot,
            });
            return resp;
        };
        snapshotDirPath = (await createSnapshot()).snapshotDirPath;
        await engine.init();
    });
    test("basic", async () => {
        const pod = new SnapshotPod_1.SnapshotImportPod();
        await pod.execute({
            config: {
                src: snapshotDirPath,
            },
            engine,
            vaults: vaults.map((ent) => ({ fsPath: ent })),
            wsRoot,
        });
        await common_test_utils_1.NodeTestPresetsV2.runJestHarness({
            opts: {
                vaultDirPath: vaults[0],
            },
            results: common_test_utils_1.PODS_CORE.SNAPSHOT.IMPORT.BASIC.results,
            expect,
        });
    });
    test("don't write git", async () => {
        fs_extra_1.default.rmdirSync(path_1.default.join(vaults[0], ".git"));
        fs_extra_1.default.ensureDirSync(path_1.default.join(snapshotDirPath, "vaults", ".git"));
        const pod = new SnapshotPod_1.SnapshotImportPod();
        await pod.execute({
            config: {
                src: snapshotDirPath,
            },
            engine,
            vaults: vaults.map((ent) => ({ fsPath: ent })),
            wsRoot,
        });
        const vaultDir = fs_extra_1.default.readdirSync(vaults[0]);
        expect(vaultDir).toMatchSnapshot();
        // no git
        expect(vaultDir.length).toEqual(6);
        // copy assets
        const assetsDir = fs_extra_1.default.readdirSync(path_1.default.join(vaults[0], "assets"));
        expect(assetsDir).toEqual(["foo.jpg"]);
    });
});
//# sourceMappingURL=SnapshotPod.spec.js.map