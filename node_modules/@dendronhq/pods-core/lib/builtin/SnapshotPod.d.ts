import { DVault } from "@dendronhq/common-all";
import { ExportPod, ExportPodCleanConfig, ExportPodCleanOpts, ExportPodPlantOpts, ExportPodRawConfig, ImportPod, ImportPodCleanConfig, ImportPodCleanOpts, ImportPodPlantOpts, ImportPodRawConfig } from "../basev2";
export declare type SnapshotExportPodRawConfig = ExportPodRawConfig & {
    ignore?: string;
};
export declare type SnapshotExportPodCleanConfig = ExportPodCleanConfig & {
    ignore: string[];
};
export declare type SnapshotExportPodResp = {
    snapshotDirPath: string;
};
export declare type SnapshotExportPodPlantOpts = ExportPodPlantOpts<SnapshotExportPodCleanConfig>;
export declare class SnapshotExportPod extends ExportPod<SnapshotExportPodRawConfig, SnapshotExportPodCleanConfig, SnapshotExportPodResp> {
    static id: string;
    static description: string;
    get config(): {
        key: string;
        description: string;
        type: "string";
        default: string;
    }[];
    backupVault({ vault, snapshotDirPath, ignore, }: {
        vault: DVault;
        snapshotDirPath: string;
        ignore: string[];
    }): Promise<void>;
    clean(opts: ExportPodCleanOpts<SnapshotExportPodRawConfig>): Promise<{
        ignore: string[];
        dest: string & import("vscode-uri").URI;
        includeBody: boolean;
        includeStubs: boolean;
    }>;
    plant(opts: SnapshotExportPodPlantOpts): Promise<SnapshotExportPodResp>;
}
export declare type SnapshotImportPodRawConfig = ImportPodRawConfig & {
    ignore?: string;
};
export declare type SnapshotImportPodCleanConfig = ImportPodCleanConfig & {};
export declare type SnapshotImportPodResp = {
    snapshotDirPath: string;
};
export declare type SnapshotImportPodPlantOpts = ImportPodPlantOpts<SnapshotImportPodCleanConfig>;
export declare class SnapshotImportPod extends ImportPod<SnapshotImportPodRawConfig, SnapshotImportPodCleanConfig> {
    static id: string;
    static description: string;
    get config(): never[];
    restoreVault({ wsRoot, vaults, snapshotDirPath, }: {
        vaults: DVault[];
        snapshotDirPath: string;
        wsRoot: string;
    }): Promise<void>;
    clean(opts: ImportPodCleanOpts<SnapshotImportPodRawConfig>): Promise<SnapshotImportPodCleanConfig>;
    plant(opts: SnapshotImportPodPlantOpts): Promise<void>;
}
