import { BasePodExecuteOpts, DVault, NotePropsV2 } from "@dendronhq/common-all";
import { ExportPod, ExportPodCleanConfig, ExportPodCleanOpts, ExportPodPlantOpts, ExportPodRawConfig, ImportPod, ImportPodCleanConfig, ImportPodCleanOpts, ImportPodPlantOpts, ImportPodRawConfig, PublishPod, PublishPodCleanConfig } from "../basev2";
export declare type JSONImportPodRawConfig = ImportPodRawConfig & {
    concatenate: boolean;
    destName?: string;
};
export declare type JSONImportPodCleanConfig = ImportPodCleanConfig & {
    concatenate: boolean;
    destName?: string;
};
export declare type JSONImportPodResp = any[];
export declare type JSONImportPodPlantOpts = ImportPodPlantOpts<JSONImportPodCleanConfig>;
export declare class JSONImportPod extends ImportPod<JSONImportPodRawConfig, JSONImportPodCleanConfig> {
    static id: string;
    static description: string;
    get config(): import("@dendronhq/common-all").PodConfig[];
    clean(opts: ImportPodCleanOpts<JSONImportPodRawConfig>): Promise<ImportPodRawConfig & {
        concatenate: boolean;
        destName?: string | undefined;
    } & ImportPodCleanConfig>;
    plant(opts: JSONImportPodPlantOpts): Promise<JSONImportPodResp>;
    _entries2Notes(entries: Partial<NotePropsV2>[], opts: Pick<JSONImportPodCleanConfig, "concatenate" | "destName"> & {
        vault: DVault;
    }): Promise<NotePropsV2[]>;
}
export declare class JSONPublishPod extends PublishPod {
    static id: string;
    static description: string;
    plant(opts: BasePodExecuteOpts<PublishPodCleanConfig>): Promise<any>;
}
export declare class JSONExportPod extends ExportPod<ExportPodRawConfig, ExportPodCleanConfig, void> {
    static id: string;
    static description: string;
    clean(opts: ExportPodCleanOpts<ExportPodRawConfig>): Promise<ExportPodRawConfig & ExportPodCleanConfig>;
    plant(opts: ExportPodPlantOpts<ExportPodCleanConfig>): Promise<void>;
}
