"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.env = exports.setEnv = exports.getOrThrow = exports.getStage = void 0;
const config_1 = require("./config");
const lodash_1 = __importDefault(require("lodash"));
function getStage() {
    // CRA overrides NODE_ENV to be dev by default
    const { stage, NODE_ENV, STAGE, REACT_APP_STAGE } = process.env;
    let stageOut = REACT_APP_STAGE || stage || STAGE || NODE_ENV;
    // TODO
    if (stageOut === "development") {
        stageOut = "dev";
    }
    if (stageOut === "production") {
        stageOut = "prod";
    }
    // fallback, assume dev
    if (!stageOut) {
        stageOut = "dev";
    }
    return stageOut;
}
exports.getStage = getStage;
function getOrThrow(obj, k, opts) {
    opts = lodash_1.default.defaults(opts, { shouldThrow: true });
    const maybeValue = obj[k];
    if (lodash_1.default.isUndefined(maybeValue) && opts.shouldThrow) {
        throw Error(`no ${k} in ${JSON.stringify(obj)}`);
    }
    return maybeValue;
}
exports.getOrThrow = getOrThrow;
function setEnv(name, value) {
    process.env[name] = value;
}
exports.setEnv = setEnv;
function env(name, opts) {
    const override = process.env[name];
    if (override) {
        return override;
    }
    const stage = getStage();
    // @ts-ignore: multiple configs
    return getOrThrow(config_1.config[stage], name, opts);
}
exports.env = env;
//# sourceMappingURL=env.js.map