"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_test_utils_1 = require("@dendronhq/common-test-utils");
const lodash_1 = __importDefault(require("lodash"));
const utilsv2_1 = require("../../utilsv2");
const replaceRefs_1 = require("../replaceRefs");
const utils_1 = require("./utils");
const getProc = (opts) => {
    return utilsv2_1.ParserUtilsV2.getRemark().use(replaceRefs_1.replaceRefs, opts);
};
describe("replaceRefs", () => {
    test("imagePrefix", () => {
        const out = getProc({ imageRefPrefix: "bond/", scratch: "" }).processSync(`![alt-text](image-url.jpg)`);
        expect(lodash_1.default.trim(out.toString())).toEqual("![alt-text](bond/image-url.jpg)");
    });
    describe("basic/", () => {
        let opts;
        beforeEach(() => {
            opts = {
                wikiLink2Md: true,
                scratch: "",
            };
        });
        test("mixed", () => {
            const links = `
[link](normal-link)

- [[foo-wiki-link]]
- [[label|foo-wiki-link]]
- [[label|foo-wiki-link]]#foobar
    `;
            const proc = getProc({
                ...opts,
            });
            const out = proc.processSync(links);
            expect(common_test_utils_1.AssertUtils.assertInString({
                body: out.toString(),
                match: [
                    "[link](normal-link)",
                    "- [foo-wiki-link](foo-wiki-link)",
                    "- [label](foo-wiki-link)",
                    "- [label](foo-wiki-link)#foobar",
                ],
            })).toBeTruthy();
        });
        test("relative", async () => {
            await common_test_utils_1.runEngineTest(async ({ engine }) => {
                const proc = getProc({
                    ...opts,
                    engine,
                });
                const out = proc.processSync("[[alpha#foo]]");
                expect(lodash_1.default.trim(out.toString())).toEqual("[alpha](alpha#foo)");
            }, {
                createEngine: utils_1.createEngine,
            });
        });
        test("use id", async () => {
            await common_test_utils_1.runEngineTest(async ({ engine }) => {
                const proc = getProc({
                    ...opts,
                    wikiLinkUseId: true,
                    engine,
                });
                const out = proc.processSync("[[alpha]]");
                expect(lodash_1.default.trim(out.toString())).toEqual("[alpha](alpha-id)");
            }, {
                createEngine: utils_1.createEngine,
                preSetupHook: async ({ vaults, wsRoot }) => {
                    await common_test_utils_1.NoteTestUtilsV4.createNote({
                        fname: "alpha",
                        wsRoot,
                        vault: vaults[0],
                        props: { id: "alpha-id" },
                    });
                },
            });
        });
        test("use id, relative link", async () => {
            await common_test_utils_1.runEngineTest(async ({ engine }) => {
                const proc = getProc({
                    ...opts,
                    wikiLinkUseId: true,
                    engine,
                });
                const out = proc.processSync("[[alpha#foo]]");
                expect(lodash_1.default.trim(out.toString())).toEqual("[alpha](alpha-id#foo)");
            }, {
                createEngine: utils_1.createEngine,
                preSetupHook: async ({ vaults, wsRoot }) => {
                    await common_test_utils_1.NoteTestUtilsV4.createNote({
                        wsRoot,
                        fname: "alpha",
                        vault: vaults[0],
                        props: { id: "alpha-id" },
                    });
                },
            });
        });
    });
});
//# sourceMappingURL=replaceRefs.spec.js.map