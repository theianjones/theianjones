"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.noteRefs = void 0;
const common_all_1 = require("@dendronhq/common-all");
const common_server_1 = require("@dendronhq/common-server");
const lodash_1 = __importDefault(require("lodash"));
const utils_1 = require("../../utils");
const types_1 = require("../types");
const utils_2 = require("../utils");
const utils_3 = require("./utils");
const LINK_REGEX = /^\(\((?<ref>[^)]+)\)\)/;
const plugin = function (opts) {
    attachParser(this);
    if (this.Compiler != null) {
        attachCompiler(this, opts);
    }
};
exports.noteRefs = plugin;
function attachParser(proc) {
    function locator(value, fromIndex) {
        return value.indexOf("((", fromIndex);
    }
    function inlineTokenizer(eat, value) {
        const match = LINK_REGEX.exec(value);
        if (match) {
            const linkMatch = match[1].trim();
            const { link } = utils_1.parseDendronRef(linkMatch);
            //const { name, displayName } = LinkUtils.parseLink(linkMatch);
            const { value, alias } = utils_3.LinkUtils.parseLink(linkMatch);
            return eat(match[0])({
                type: "refLink",
                value,
                data: {
                    alias,
                    link,
                },
            });
        }
        return;
    }
    inlineTokenizer.locator = locator;
    const Parser = proc.Parser;
    const inlineTokenizers = Parser.prototype.inlineTokenizers;
    const inlineMethods = Parser.prototype.inlineMethods;
    inlineTokenizers.refLink = inlineTokenizer;
    inlineMethods.splice(inlineMethods.indexOf("link"), 0, "refLink");
    return Parser;
}
function attachCompiler(proc, opts) {
    const Compiler = proc.Compiler;
    const visitors = Compiler.prototype.visitors;
    const copts = lodash_1.default.defaults(opts || {}, {});
    if (visitors) {
        visitors.refLink = function (node) {
            const ndata = node.data;
            const { error, data } = convertNoteRef({
                link: ndata.link,
                proc,
                compilerOpts: copts,
            });
            if (error) {
                return `ERROR converting ref: ${error.msg}`;
            }
            return data;
        };
    }
}
const MAX_REF_LVL = 3;
/**
 * Look at links and do initial pass
 */
function convertNoteRef(opts) {
    let data;
    let errors = [];
    const { link, proc, compilerOpts } = opts;
    const refLvl = utils_2.MDUtilsV4.getNoteRefLvl(proc());
    const { dest, vault } = utils_2.MDUtilsV4.getDendronData(proc);
    if (!vault) {
        return { error: new common_all_1.DendronError({ msg: "no vault specified" }), data: "" };
    }
    let { prettyRefs, wikiLinkOpts } = compilerOpts;
    if (!prettyRefs &&
        lodash_1.default.includes([types_1.DendronASTDest.HTML, types_1.DendronASTDest.MD_ENHANCED_PREVIEW], dest)) {
        prettyRefs = true;
    }
    if (refLvl >= MAX_REF_LVL) {
        return {
            error: new common_all_1.DendronError({ msg: "too many nested note refs" }),
            data,
        };
    }
    const { error, engine } = utils_2.MDUtilsV4.getEngineFromProc(proc);
    let noteRefs = [];
    if (link.from.fname.endsWith("*")) {
        const resp = engine.queryNotesSync({ qs: link.from.fname, vault });
        const out = lodash_1.default.filter(resp.data, (ent) => common_all_1.DUtils.minimatch(ent.fname, link.from.fname));
        noteRefs = lodash_1.default.sortBy(out.map((ent) => common_all_1.NoteUtilsV2.toNoteLoc(ent)), "fname");
    }
    else {
        noteRefs.push(link.from);
    }
    const out = noteRefs.map((ref) => {
        const fname = ref.fname;
        const alias = ref.alias;
        // TODO: find first unit with path
        const npath = common_all_1.DNodeUtilsV2.getFullPath({
            wsRoot: engine.wsRoot,
            vault,
            basename: fname + ".md",
        });
        try {
            const note = common_server_1.file2Note(npath, vault);
            const body = note.body;
            const { error, data } = convertNoteRefHelper({
                body,
                link,
                refLvl: refLvl + 1,
                proc,
                compilerOpts,
            });
            if (error) {
                errors.push(error);
            }
            if (prettyRefs) {
                let suffix = "";
                let href = fname;
                if (wikiLinkOpts === null || wikiLinkOpts === void 0 ? void 0 : wikiLinkOpts.useId) {
                    const maybeNote = common_all_1.NoteUtilsV2.getNoteByFnameV4({
                        fname,
                        notes: engine.notes,
                        vault,
                    });
                    if (!maybeNote) {
                        return `error with ${ref}`;
                    }
                    href = maybeNote === null || maybeNote === void 0 ? void 0 : maybeNote.id;
                }
                if (dest === types_1.DendronASTDest.HTML) {
                    const maybeNote = common_all_1.NoteUtilsV2.getNoteByFnameV4({
                        fname,
                        notes: engine.notes,
                        vault,
                    });
                    suffix = ".html";
                    if ((maybeNote === null || maybeNote === void 0 ? void 0 : maybeNote.custom.permalink) === "/") {
                        href = "";
                        suffix = "";
                    }
                }
                if (dest === types_1.DendronASTDest.MD_ENHANCED_PREVIEW) {
                    suffix = ".md";
                }
                const link = `"${(wikiLinkOpts === null || wikiLinkOpts === void 0 ? void 0 : wikiLinkOpts.prefix) || ""}${href}${suffix}"`;
                return renderPretty({
                    content: data,
                    title: alias || fname || "no title",
                    link,
                });
            }
            else {
                return data;
            }
        }
        catch (err) {
            const msg = `error reading file, ${npath}`;
            errors.push(new common_all_1.DendronError({ msg }));
            return msg;
        }
    });
    return { error, data: out.join("\n") };
}
function convertNoteRefHelper(opts) {
    const { body, proc, refLvl, link } = opts;
    const noteRefProc = proc();
    utils_2.MDUtilsV4.setNoteRefLvl(noteRefProc, refLvl);
    const bodyAST = noteRefProc.parse(body);
    const { anchorStart, anchorEnd, anchorStartOffset } = link.data;
    // TODO: can i just strip frontmatter when reading?
    let anchorStartIndex = bodyAST.children[0].type === "yaml" ? 1 : 0;
    let anchorEndIndex = bodyAST.children.length;
    if (anchorStart) {
        anchorStartIndex = findHeader(bodyAST.children, anchorStart);
        if (anchorStartIndex < 0) {
            return { data: "Start anchor ${anchorStart} not found", error: null };
        }
    }
    if (anchorEnd) {
        anchorEndIndex = findHeader(bodyAST.children.slice(anchorStartIndex + 1), anchorEnd);
        if (anchorEndIndex < 0) {
            return { data: "end anchor ${anchorEnd} not found", error: null };
        }
        anchorEndIndex += anchorStartIndex + 1;
    }
    // interested range
    try {
        bodyAST.children = bodyAST.children.slice(anchorStartIndex, anchorEndIndex);
        let out = noteRefProc
            .processSync(noteRefProc.stringify(bodyAST))
            .toString();
        if (anchorStartOffset) {
            out = out.split("\n").slice(anchorStartOffset).join("\n");
        }
        return { error: null, data: out };
    }
    catch (err) {
        return {
            error: new common_all_1.DendronError({
                msg: "error processing note ref",
                payload: err,
            }),
            data: "error processing ref",
        };
    }
}
function findHeader(nodes, match) {
    const foundIndex = utils_2.MDUtilsV4.findIndex(nodes, function (node) {
        return utils_2.MDUtilsV4.isHeading(node, match);
    });
    return foundIndex;
}
function renderPretty(opts) {
    const { content, title, link } = opts;
    return `
<div class="portal-container">
<div class="portal-head">
<div class="portal-backlink" >
<div class="portal-title">From <span class="portal-text-title">${title}</span></div>
<a href=${link} class="portal-arrow">Go to text <span class="right-arrow">â†’</span></a>
</div>
</div>
<div id="portal-parent-anchor" class="portal-parent" markdown="1">
<div class="portal-parent-fader-top"></div>
<div class="portal-parent-fader-bottom"></div>        
  
${content}

</div>    
</div>
`;
}
//# sourceMappingURL=noteRefs.js.map