"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_server_1 = require("@dendronhq/common-server");
const common_test_utils_1 = require("@dendronhq/common-test-utils");
const lodash_1 = __importDefault(require("lodash"));
const enginev2_1 = require("../../../enginev2");
const types_1 = require("../../types");
const utils_1 = require("../../utils");
const wikiLinks_1 = require("../wikiLinks");
function proc(engine, dendron, opts) {
    return utils_1.MDUtilsV4.proc({ engine })
        .data("dendron", dendron)
        .use(wikiLinks_1.wikiLinks, opts);
}
describe("parse", () => {
    let engine;
    let dendronData = { dest: types_1.DendronASTDest.MD_REGULAR };
    test("init", () => {
        const resp = proc(engine, dendronData).parse(`[[foo.md]]`);
        expect(resp).toMatchSnapshot();
        // @ts-ignore
        expect(resp.children[0].children[0].type).toEqual("wikiLink");
    });
    test("doesn't parse inline code block", () => {
        const resp = proc(engine, dendronData).parse("`[[foo.md]]`");
        expect(resp).toMatchSnapshot("bond");
        // @ts-ignore
        expect(resp.children[0].children[0].type).toEqual("inlineCode");
    });
});
const createEngine = ({ vaults, wsRoot }) => {
    const logger = common_server_1.createLogger("testLogger", "/tmp/engine-server.txt");
    const engine = enginev2_1.DendronEngineV2.createV3({ vaults, wsRoot, logger });
    return engine;
};
const basicSetup = async ({ wsRoot, vaults }) => {
    await common_test_utils_1.NoteTestUtilsV4.createNote({
        wsRoot,
        fname: "foo",
        vault: vaults[0],
        props: { id: "foo-id" },
    });
};
const getTextString1 = (link = `[[FAQ | dendron.faq]]`) => `See the ${link} for answers for`;
describe("compilev2", () => {
    const linkWithNoExtension = "[[foo]]";
    const linkWithExtension = "[[foo.md]]";
    const linkWithAlias = `[[bar|foo]]`;
    const textString1 = getTextString1();
    const expected = {
        [types_1.DendronASTDest.HTML]: {
            regular: {
                link: `[foo](foo.html)`,
            },
            regularWithExtension: {
                link: `[foo](foo.html)`,
            },
            alias: {
                link: `[bar](foo.html)`,
            },
            withId: {
                link: `[foo](foo-id.html)`,
            },
            textString1: {
                link: getTextString1(`[FAQ](dendron.faq.html)`),
            },
        },
        [types_1.DendronASTDest.MD_REGULAR]: {
            regular: {
                link: `[foo](foo)`,
            },
            regularWithExtension: {
                link: `[foo](foo)`,
            },
            alias: {
                link: `[bar](foo)`,
            },
            withId: {
                link: `[foo](foo-id)`,
            },
            textString1: {
                link: getTextString1(`[FAQ](dendron.faq)`),
            },
        },
        [types_1.DendronASTDest.MD_ENHANCED_PREVIEW]: {
            regular: {
                link: `[foo](foo.md)`,
            },
            regularWithExtension: {
                link: `[foo](foo.md)`,
            },
            alias: {
                link: `[bar](foo.md)`,
            },
            withId: {
                link: `[foo](foo-id.md)`,
            },
            textString1: {
                link: getTextString1(`[FAQ](dendron.faq.md)`),
            },
        },
    };
    const testCases = [
        {
            testCase: "regular",
            linkProcess: linkWithNoExtension,
            preSetupHook: undefined,
            procOpts: {},
        },
        {
            testCase: "regularWithExtension",
            linkProcess: linkWithExtension,
            preSetupHook: undefined,
            procOpts: {},
        },
        { testCase: "alias", linkProcess: linkWithAlias },
        {
            testCase: "withId",
            linkProcess: linkWithExtension,
            preSetupHook: basicSetup,
            procOpts: { useId: true },
        },
        {
            testCase: "textString1",
            linkProcess: textString1,
        },
    ];
    Object.values(types_1.DendronASTDest).map((key) => {
        const dest = key;
        describe(dest, () => {
            test.each(testCases.map((ent) => [ent.testCase, ent]))("%p", async (_key, obj) => {
                const { testCase, linkProcess, preSetupHook, procOpts } = obj;
                await common_test_utils_1.runEngineTestV4(async ({ engine }) => {
                    const resp = await proc(engine, {
                        dest,
                    }, procOpts).process(linkProcess);
                    expect(resp).toMatchSnapshot();
                    expect(lodash_1.default.trim(resp.toString())).toEqual(expected[dest][testCase].link);
                }, { expect, createEngine, preSetupHook });
            });
        });
    });
});
//# sourceMappingURL=wikiLinks.spec.js.map