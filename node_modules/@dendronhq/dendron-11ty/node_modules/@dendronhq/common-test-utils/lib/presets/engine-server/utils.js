"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ENGINE_HOOKS_MULTI = exports.ENGINE_HOOKS = exports.setupSchemaPresetWithNamespaceTemplate = exports.setupSchemaPresetWithNamespaceTemplateMulti = exports.setupSchemaPresetWithNamespaceTemplateBase = exports.setupSchemaPreseet = exports.setupNoteRefRecursive = exports.setupBasicMulti = exports.setupBasic = void 0;
const common_all_1 = require("@dendronhq/common-all");
const noteUtils_1 = require("../../noteUtils");
const notes_1 = require("../notes");
const schemas_1 = require("../schemas");
/**
 * Notes created:
 *   - vault1:
 *     - foo
 *     - foo.ch1
 *   - vault2:
 *     - bar
 */
exports.setupBasic = async ({ vaults, wsRoot }) => {
    const vault = vaults[0];
    await notes_1.NOTE_PRESETS_V4.NOTE_SIMPLE.create({
        vault,
        wsRoot,
    });
    await notes_1.NOTE_PRESETS_V4.NOTE_SIMPLE_CHILD.create({
        vault,
        wsRoot,
    });
    await notes_1.NOTE_PRESETS_V4.NOTE_SIMPLE_OTHER.create({
        vault,
        wsRoot,
    });
    await schemas_1.SCHEMA_PRESETS_V4.SCHEMA_SIMPLE.create({ vault, wsRoot });
};
exports.setupBasicMulti = async ({ vaults, wsRoot, }) => {
    const vault1 = vaults[0];
    const vault2 = vaults[1];
    await notes_1.NOTE_PRESETS_V4.NOTE_SIMPLE.create({
        vault: vault1,
        wsRoot,
    });
    await notes_1.NOTE_PRESETS_V4.NOTE_SIMPLE_CHILD.create({
        vault: vault1,
        wsRoot,
    });
    await notes_1.NOTE_PRESETS_V4.NOTE_SIMPLE_OTHER.create({
        vault: vault2,
        wsRoot,
    });
    await schemas_1.SCHEMA_PRESETS_V4.SCHEMA_SIMPLE.create({ vault: vault1, wsRoot });
};
exports.setupNoteRefRecursive = async ({ vaults, wsRoot, }) => {
    const vault = vaults[0];
    await notes_1.NOTE_PRESETS_V4.NOTE_SIMPLE.create({
        vault,
        wsRoot,
        body: "((ref: [[foo.one]]))",
    });
    await noteUtils_1.NoteTestUtilsV4.createNote({
        vault,
        fname: "foo.one",
        body: ["# Foo.One", `((ref: [[foo.two]]))`].join("\n"),
        wsRoot,
        props: {
            id: "foo.one-id",
        },
    });
    await noteUtils_1.NoteTestUtilsV4.createNote({
        vault,
        fname: "foo.two",
        body: ["# Foo.Two", `blah`].join("\n"),
        wsRoot,
    });
};
exports.setupSchemaPreseet = async (opts) => {
    await exports.setupBasic(opts);
    const { wsRoot, vaults } = opts;
    const vault = vaults[0];
    noteUtils_1.NoteTestUtilsV4.createSchema({
        fname: "bar",
        wsRoot,
        vault,
        modifier: (schema) => {
            const schemas = [
                common_all_1.SchemaUtilsV2.create({
                    id: "bar",
                    parent: "root",
                    children: ["ch1", "ch2"],
                    vault,
                }),
                common_all_1.SchemaUtilsV2.create({
                    id: "ch1",
                    template: { id: "bar.template.ch1", type: "note" },
                    vault,
                }),
                common_all_1.SchemaUtilsV2.create({
                    id: "ch2",
                    template: { id: "bar.template.ch2", type: "note" },
                    namespace: true,
                    vault,
                }),
            ];
            schemas.map((s) => {
                schema.schemas[s.id] = s;
            });
            return schema;
        },
    });
    await noteUtils_1.NoteTestUtilsV4.createNote({
        wsRoot,
        body: "ch1 template",
        fname: "bar.template.ch1",
        vault,
    });
    await noteUtils_1.NoteTestUtilsV4.createNote({
        wsRoot,
        body: "ch2 template",
        fname: "bar.template.ch2",
        vault,
    });
};
exports.setupSchemaPresetWithNamespaceTemplateBase = async (opts) => {
    await exports.setupBasic(opts);
    const { wsRoot, vaults } = opts;
    const vault1 = vaults[0];
    const vault2 = vaults[1];
    noteUtils_1.NoteTestUtilsV4.createSchema({
        fname: "journal",
        wsRoot,
        vault: vault1,
        modifier: (schema) => {
            const schemas = [
                common_all_1.SchemaUtilsV2.create({
                    id: "daily",
                    parent: "root",
                    children: ["journal"],
                    vault: vault1,
                }),
                common_all_1.SchemaUtilsV2.create({
                    id: "journal",
                    children: ["year"],
                    vault: vault1,
                }),
                common_all_1.SchemaUtilsV2.create({
                    id: "year",
                    pattern: "[0-2][0-9][0-9][0-9]",
                    children: ["month"],
                    vault: vault1,
                }),
                common_all_1.SchemaUtilsV2.create({
                    id: "month",
                    pattern: "[0-9][0-9]",
                    children: ["day"],
                    vault: vault1,
                }),
                common_all_1.SchemaUtilsV2.create({
                    id: "day",
                    pattern: "[0-9][0-9]",
                    namespace: true,
                    template: {
                        id: "journal.template",
                        type: "note",
                    },
                    vault: vault2,
                }),
            ];
            schemas.map((s) => {
                schema.schemas[s.id] = s;
            });
            return schema;
        },
    });
    await noteUtils_1.NoteTestUtilsV4.createNote({
        wsRoot,
        body: "Journal",
        fname: "daily",
        vault: vault2,
    });
    await noteUtils_1.NoteTestUtilsV4.createNote({
        wsRoot,
        body: "Template text",
        fname: "journal.template",
        vault: vault2,
    });
};
exports.setupSchemaPresetWithNamespaceTemplateMulti = async (opts) => {
    return exports.setupSchemaPresetWithNamespaceTemplateBase(opts);
};
exports.setupSchemaPresetWithNamespaceTemplate = async (opts) => {
    const vault = opts.vaults[0];
    return exports.setupSchemaPresetWithNamespaceTemplateBase({
        ...opts,
        vaults: [vault, vault],
    });
};
exports.ENGINE_HOOKS = {
    setupBasic: exports.setupBasic,
    setupSchemaPreseet: exports.setupSchemaPreseet,
    setupSchemaPresetWithNamespaceTemplate: exports.setupSchemaPresetWithNamespaceTemplate,
    setupNoteRefRecursive: exports.setupNoteRefRecursive,
};
exports.ENGINE_HOOKS_MULTI = {
    setupBasicMulti: exports.setupBasicMulti,
    setupSchemaPresetWithNamespaceTemplateMulti: exports.setupSchemaPresetWithNamespaceTemplateMulti,
};
//# sourceMappingURL=utils.js.map