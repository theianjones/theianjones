"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ENGINE_GET_NOTE_BY_PATH_PRESETS = void 0;
const common_all_1 = require("@dendronhq/common-all");
const utilsv2_1 = require("../../utilsv2");
const notes_1 = require("../notes");
const SCHEMAS = {};
const NOTES = {
    ROOT: new utilsv2_1.TestPresetEntryV4(async ({ vaults, engine }) => {
        const vault = vaults[0];
        const root = common_all_1.NoteUtilsV2.getNoteByFnameV4({
            fname: "root",
            notes: engine.notes,
            vault,
        });
        const { data } = await engine.getNoteByPath({ npath: "root", vault });
        return [
            {
                actual: data === null || data === void 0 ? void 0 : data.changed,
                expected: [],
            },
            {
                actual: data === null || data === void 0 ? void 0 : data.note,
                expected: root,
            },
        ];
    }),
    EXISTING_NOTE: new utilsv2_1.TestPresetEntryV4(async ({ vaults, engine }) => {
        const vault = vaults[0];
        const note = common_all_1.NoteUtilsV2.getNoteByFnameV4({
            fname: "foo",
            notes: engine.notes,
            vault,
        });
        const { data } = await engine.getNoteByPath({ npath: "foo", vault });
        return [
            {
                actual: data === null || data === void 0 ? void 0 : data.changed,
                expected: [],
            },
            {
                actual: data === null || data === void 0 ? void 0 : data.note,
                expected: note,
            },
        ];
    }, {
        preSetupHook: async ({ vaults, wsRoot }) => {
            const vault = vaults[0];
            await notes_1.NOTE_PRESETS_V4.NOTE_SIMPLE.create({ vault, wsRoot });
        },
    }),
    NOTE_WITH_CAPS_AND_SPACES: new utilsv2_1.TestPresetEntryV4(async ({ vaults, engine }) => {
        const vault = vaults[0];
        const note = common_all_1.NoteUtilsV2.getNoteByFnameV4({
            fname: "000 Index",
            notes: engine.notes,
            vault,
        });
        const { data } = await engine.getNoteByPath({
            npath: "000 Index",
            vault,
        });
        return [
            {
                actual: data === null || data === void 0 ? void 0 : data.changed,
                expected: [],
            },
            {
                actual: data === null || data === void 0 ? void 0 : data.note,
                expected: note,
            },
        ];
    }, {
        preSetupHook: async ({ vaults, wsRoot }) => {
            const vault = vaults[0];
            await notes_1.NOTE_PRESETS_V4.NOTE_WITH_CAPS_AND_SPACE.create({
                vault,
                wsRoot,
            });
        },
    }),
    NEW_NOTE: new utilsv2_1.TestPresetEntryV4(async ({ vaults, engine }) => {
        var _a;
        const vault = vaults[0];
        const { data } = await engine.getNoteByPath({
            npath: "bar",
            vault,
            createIfNew: true,
        });
        return [
            {
                actual: data === null || data === void 0 ? void 0 : data.changed.map((ent) => ({
                    fname: ent.note.fname,
                    status: ent.status,
                })),
                expected: [
                    { fname: "root", status: "update" },
                    { fname: "bar", status: "create" },
                ],
            },
            {
                actual: (_a = data === null || data === void 0 ? void 0 : data.note) === null || _a === void 0 ? void 0 : _a.fname,
                expected: "bar",
            },
        ];
    }),
};
exports.ENGINE_GET_NOTE_BY_PATH_PRESETS = {
    NOTES,
    SCHEMAS,
};
//# sourceMappingURL=getByPath.js.map