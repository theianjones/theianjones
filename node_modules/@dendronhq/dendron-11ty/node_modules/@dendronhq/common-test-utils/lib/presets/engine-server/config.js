"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ENGINE_CONFIG_PRESETS = void 0;
const common_all_1 = require("@dendronhq/common-all");
const common_server_1 = require("@dendronhq/common-server");
const path_1 = __importDefault(require("path"));
const utilsv2_1 = require("../../utilsv2");
function genDefaultConfig() {
    return {
        version: 1,
        vaults: [],
        site: {
            copyAssets: true,
            siteHierarchies: ["root"],
            siteRootDir: "docs",
            usePrettyRefs: true,
        },
    };
}
const WRITE = {
    NEW_CONFIG: new utilsv2_1.TestPresetEntryV4(async ({ engine }) => {
        const config = genDefaultConfig();
        config.site.copyAssets = false;
        const resp = await engine.writeConfig({ config });
        const cpath = path_1.default.join(engine.configRoot, common_all_1.CONSTANTS.DENDRON_CONFIG_FILE);
        const configOnFile = common_server_1.readYAML(cpath);
        return [
            {
                actual: resp.error,
                expected: null,
            },
            {
                actual: configOnFile,
                expected: config,
            },
        ];
    }),
};
const GET = {
    DEFAULT_CONFIG: new utilsv2_1.TestPresetEntryV4(async ({ engine }) => {
        const cpath = path_1.default.join(engine.configRoot, common_all_1.CONSTANTS.DENDRON_CONFIG_FILE);
        common_server_1.writeYAML(cpath, genDefaultConfig());
        const resp = await engine.getConfig();
        return [
            {
                actual: resp.error,
                expected: null,
            },
            {
                actual: resp.data,
                expected: genDefaultConfig(),
            },
        ];
    }),
};
exports.ENGINE_CONFIG_PRESETS = {
    WRITE,
    GET,
};
//# sourceMappingURL=config.js.map