"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ENGINE_QUERY_PRESETS = void 0;
const common_all_1 = require("@dendronhq/common-all");
const lodash_1 = __importDefault(require("lodash"));
const utilsv2_1 = require("../../utilsv2");
const notes_1 = require("../notes");
const schemas_1 = require("../schemas");
const utils_1 = require("./utils");
const SCHEMAS = {
    EMPTY_QS: new utilsv2_1.TestPresetEntryV4(async ({ vaults, engine }) => {
        const vault = vaults[0];
        const schemas = engine.schemas;
        const { data } = await engine.querySchema("");
        const expectedNote = common_all_1.SchemaUtilsV2.getSchemaModuleByFnameV4({
            fname: "root",
            schemas,
            vault,
        });
        return [
            {
                actual: data[0],
                expected: expectedNote,
            },
        ];
    }, {
        preSetupHook: utils_1.setupBasic,
    }),
    STAR_QUERY: new utilsv2_1.TestPresetEntryV4(async ({ engine }) => {
        const { data } = await engine.querySchema("*");
        return [
            {
                actual: data.length,
                expected: 2,
            },
        ];
    }, {
        preSetupHook: utils_1.setupBasic,
    }),
    SIMPLE: new utilsv2_1.TestPresetEntryV4(async ({ engine, vaults }) => {
        const schemas = engine.schemas;
        const vault = vaults[0];
        const sid = schemas_1.SCHEMA_PRESETS_V4.SCHEMA_SIMPLE.fname;
        const { data } = await engine.querySchema(sid);
        const expectedSchema = common_all_1.SchemaUtilsV2.getSchemaModuleByFnameV4({
            fname: sid,
            schemas,
            vault,
        });
        return [
            {
                actual: data[0],
                expected: expectedSchema,
            },
        ];
    }, {
        preSetupHook: utils_1.setupBasic,
    }),
};
const NOTES = {
    EMPTY_QS: new utilsv2_1.TestPresetEntryV4(async ({ vaults, engine }) => {
        const vault = vaults[0];
        const notes = engine.notes;
        const { data } = await engine.queryNotes({ qs: "", vault });
        const expectedNote = common_all_1.NoteUtilsV2.getNoteByFnameV4({
            fname: "root",
            notes,
            vault,
        });
        const matchNote = lodash_1.default.find(data, { id: expectedNote === null || expectedNote === void 0 ? void 0 : expectedNote.id });
        return [
            {
                actual: matchNote,
                expected: expectedNote,
            },
        ];
    }, {
        preSetupHook: utils_1.setupBasic,
    }),
    STAR_QUERY: new utilsv2_1.TestPresetEntryV4(async ({ vaults, engine }) => {
        const vault = vaults[0];
        const { data } = await engine.queryNotes({ qs: "*", vault });
        return [
            {
                actual: data.length,
                expected: 4,
            },
        ];
    }, {
        preSetupHook: utils_1.setupBasic,
    }),
    DOMAIN_QUERY_WITH_SCHEMA: new utilsv2_1.TestPresetEntryV4(async ({ vaults, engine }) => {
        const vault = vaults[0];
        const notes = engine.notes;
        const fname = notes_1.NOTE_PRESETS_V4.NOTE_SIMPLE.fname;
        const { data } = await engine.queryNotes({ qs: fname, vault });
        const expectedNote = common_all_1.NoteUtilsV2.getNoteByFnameV4({
            fname,
            notes,
            vault,
        });
        return [
            {
                actual: data[0],
                expected: expectedNote,
            },
            {
                actual: data[0].schema,
                expected: {
                    moduleId: schemas_1.SCHEMA_PRESETS_V4.SCHEMA_SIMPLE.fname,
                    schemaId: schemas_1.SCHEMA_PRESETS_V4.SCHEMA_SIMPLE.fname,
                },
            },
        ];
    }, {
        preSetupHook: utils_1.setupBasic,
    }),
    CHILD_QUERY_WITH_SCHEMA: new utilsv2_1.TestPresetEntryV4(async ({ vaults, engine }) => {
        const vault = vaults[0];
        const notes = engine.notes;
        const fname = notes_1.NOTE_PRESETS_V4.NOTE_SIMPLE_CHILD.fname;
        const { data } = await engine.queryNotes({ qs: fname, vault });
        const expectedNote = common_all_1.NoteUtilsV2.getNoteByFnameV4({
            fname,
            notes,
            vault,
        });
        const matchNote = lodash_1.default.find(data, { id: expectedNote === null || expectedNote === void 0 ? void 0 : expectedNote.id });
        return [
            {
                actual: matchNote,
                expected: expectedNote,
            },
            {
                actual: matchNote === null || matchNote === void 0 ? void 0 : matchNote.schema,
                expected: {
                    moduleId: schemas_1.SCHEMA_PRESETS_V4.SCHEMA_SIMPLE.fname,
                    schemaId: common_all_1.DNodeUtilsV2.basename(notes_1.NOTE_PRESETS_V4.NOTE_SIMPLE_CHILD.fname),
                },
            },
        ];
    }, {
        preSetupHook: utils_1.setupBasic,
    }),
};
exports.ENGINE_QUERY_PRESETS = {
    NOTES,
    SCHEMAS,
};
//# sourceMappingURL=query.js.map