/// <reference types="jest" />
import { DEngineClientV2, DEngineInitRespV2, WorkspaceOpts } from "@dendronhq/common-all";
import { PostSetupHookFunction, SetupHookFunction, TestResult } from "./types";
export declare const toPlainObject: <R>(value: unknown) => R;
export declare class AssertUtils {
    static assertInString({ body, match, nomatch, }: {
        body: string;
        match?: string[];
        nomatch?: string[];
    }): Promise<boolean>;
}
export declare abstract class EngineTest<TPreSetupOut = any, TPostSetupOut = any> {
    preSetupHook: SetupHookFunction<TPreSetupOut>;
    postSetupHook: SetupHookFunction<TPostSetupOut>;
    engine: DEngineClientV2;
    constructor(opts: {
        preSetupHook?: SetupHookFunction<TPreSetupOut>;
        postSetupHook?: SetupHookFunction<TPostSetupOut>;
        engine: DEngineClientV2;
    });
    runJest: () => void;
    runMocha: () => void;
}
export declare class TestPresetEntry<TBeforeOpts, TAfterOpts, TResultsOpts> {
    label: string;
    before: (_opts: TBeforeOpts) => Promise<any>;
    preSetupHook: SetupHookFunction;
    postSetupHook: SetupHookFunction;
    after: (_opts: TAfterOpts) => Promise<any>;
    results: (_opts: TResultsOpts) => Promise<TestResult[]>;
    init: () => Promise<void>;
    constructor({ label, results, before, after, preSetupHook, postSetupHook, }: {
        label: string;
        preSetupHook?: SetupHookFunction;
        postSetupHook?: SetupHookFunction;
        beforeSetup?: (_opts: TBeforeOpts) => Promise<any>;
        before?: (_opts: TBeforeOpts) => Promise<any>;
        after?: (_opts: TAfterOpts) => Promise<any>;
        results: (_opts: TResultsOpts) => Promise<TestResult[]>;
    });
}
export declare function runMochaHarness<TOpts>(results: any, opts?: TOpts): Promise<void[]>;
export declare function runJestHarness<TOpts>(results: any, expect: jest.Expect, opts?: TOpts): Promise<void[]>;
export declare function runJestHarnessV2(results: any, expect: any): Promise<any[]>;
export declare type RunEngineTestFunctionOpts = {
    engine: DEngineClientV2;
    initResp: DEngineInitRespV2;
} & WorkspaceOpts;
export declare type RunEngineTestFunction = (opts: RunEngineTestFunctionOpts) => Promise<any>;
export declare type RunEngineTestFunctionV4<T = any> = (opts: RunEngineTestFunctionOpts & {
    extra?: any;
}) => Promise<TestResult[] | void | T>;
export declare type SetupTestFunctionV4 = (opts: RunEngineTestFunctionOpts & {
    extra?: any;
}) => Promise<any>;
export declare type GenTestResults = (opts: RunEngineTestFunctionOpts & {
    extra?: any;
}) => Promise<TestResult[]>;
export declare type CreateEngineFunction = (opts: WorkspaceOpts) => DEngineClientV2;
export declare function runEngineTest(func: RunEngineTestFunction, opts: {
    preSetupHook?: SetupHookFunction;
    postSetupHook?: PostSetupHookFunction;
    createEngine: CreateEngineFunction;
}): Promise<void>;
