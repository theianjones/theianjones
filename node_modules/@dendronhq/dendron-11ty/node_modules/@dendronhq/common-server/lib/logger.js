"use strict";
// import pino from "pino";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logAndThrow = exports.pino = exports.createLogger = exports.Logger = void 0;
const common_all_1 = require("@dendronhq/common-all");
const lodash_1 = __importDefault(require("lodash"));
const pino_1 = __importDefault(require("pino"));
exports.pino = pino_1.default;
class Logger {
    constructor(opts) {
        this.debug = (msg) => {
            this._log(msg);
        };
        this.info = (msg) => {
            this._log(msg);
        };
        this.error = (msg) => {
            this._log(msg);
        };
        this.name = opts.name;
        this.level = opts.level;
    }
    _log(msg) {
        let ctx = "";
        if (msg.ctx) {
            ctx = msg.ctx;
        }
        // eslint-disable-next-line no-console
        console.log(this.name, ctx, msg);
    }
}
exports.Logger = Logger;
function createLogger(name, dest, opts) {
    const level = (opts === null || opts === void 0 ? void 0 : opts.lvl) || common_all_1.env("LOG_LEVEL", { shouldThrow: false }) || "info";
    const nameClean = name || common_all_1.env("LOG_NAME", { shouldThrow: false });
    const logDst = dest || common_all_1.env("LOG_DST", { shouldThrow: false });
    if (!logDst || lodash_1.default.isEmpty(logDst) || logDst === "stdout") {
        const out = pino_1.default({ name: nameClean, level });
        return out;
    }
    else {
        return pino_1.default(pino_1.default.destination(logDst)).child({ name: nameClean, level });
    }
}
exports.createLogger = createLogger;
function logAndThrow(logger, msg) {
    logger.error(msg);
    throw JSON.stringify(msg);
}
exports.logAndThrow = logAndThrow;
//# sourceMappingURL=logger.js.map