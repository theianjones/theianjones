#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateTime = exports.addLayout = void 0;
const common_all_1 = require("@dendronhq/common-all");
const yargs_1 = __importDefault(require("yargs"));
const src_1 = require("../src");
const build_site_v2_1 = require("../src/commands/build-site-v2");
const exportPod_1 = require("../src/commands/exportPod");
const importPod_1 = require("../src/commands/importPod");
const launchEngineServer_1 = require("../src/commands/launchEngineServer");
const plantSeed_1 = require("../src/commands/plantSeed");
const publishNotes_1 = require("../src/commands/publishNotes");
const PublishPodCLICommand_1 = require("../src/commands/PublishPodCLICommand");
if (!common_all_1.env("LOG_LEVEL", { shouldThrow: false })) {
    common_all_1.setEnv("LOG_LEVEL", "error");
}
exports.addLayout = {
    name: "add fm",
    operation: "add",
    data: {
        from: { key: "layout" },
        to: { value: "single" },
    },
};
exports.updateTime = {
    operation: "title2time",
    data: {},
};
let buildYargs = yargs_1.default
    .command("exportPod", "export a pod", exportPod_1.ExportPodCLICommand.buildArgs, async (args) => {
    return exportPod_1.ExportPodCLICommand.run(args);
})
    .command("importPod", "import a pod", importPod_1.ImportPodCLICommand.buildArgs, async (args) => {
    return importPod_1.ImportPodCLICommand.run(args);
});
plantSeed_1.PlantSeedCommand.buildCmd(buildYargs);
src_1.BuildSiteCommand.buildCmd(buildYargs);
build_site_v2_1.BuildSiteCommandV2.buildCmd(buildYargs);
publishNotes_1.PublishNotesCommand.buildCmd(buildYargs);
PublishPodCLICommand_1.PublishPodCLICommand.buildCmd(buildYargs);
launchEngineServer_1.LaunchEngineServerCommand.buildCmd(buildYargs);
// .command<RefactorFMCliOpts>(
//   "refactorFM",
//   "refactor frontmatter",
//   (args) => {
//     args.option("vault", {
//       describe: "location of vault",
//     });
//   },
//   async (args) => {
//     const { vault } = args;
//     const cmd = new RefactorFMCommand();
//     await cmd.execute({
//       root: vault,
//       include: ["blog.thoughts.*"],
//       rule: updateTime,
//     });
//   }
// )
buildYargs.demandCommand(1).help().argv;
//# sourceMappingURL=dendron-cli.js.map