"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefactorFMCommand = void 0;
const common_server_1 = require("@dendronhq/common-server");
const path_1 = __importDefault(require("path"));
const refactorBase_1 = require("./refactorBase");
class RefactorFMCommand extends refactorBase_1.RefactorBaseCommand {
    constructor() {
        super("RefactorFM");
    }
    matchFile(_file) {
        return {
            isMatch: true,
        };
    }
    refactorFile(file, rule) {
        switch (rule.operation) {
            case "add": {
                const data = rule.data;
                const key = data.from.key;
                file.custom[key] = data.to.value;
                break;
            }
            case "title2time": {
                const fname = file.fname;
                const t2 = fname.split(".").slice(-1);
                const t3 = t2[0].split("-").slice(0, 3).join("-");
                file.custom.date = t3;
                break;
            }
            default:
                throw Error(`${rule.operation} not supported`);
        }
        return file;
    }
    readFile(fpath) {
        return common_server_1.file2Note(fpath, { fsPath: path_1.default.dirname(fpath) });
    }
    writeFile(_fpath, _data) {
        // const root = path.dirname(fpath);
        throw Error("not implemented");
        // return note2File(data, root);
    }
}
exports.RefactorFMCommand = RefactorFMCommand;
//# sourceMappingURL=refactorFM.js.map