"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefactorBaseCommand = void 0;
const common_server_1 = require("@dendronhq/common-server");
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const base_1 = require("./base");
class RefactorBaseCommand extends base_1.BaseCommand {
    cleanOpts(opts) {
        return lodash_1.default.defaults(opts, {
            include: ["*.md"],
            exclude: [],
            dryRun: false,
            limit: 9999
        });
    }
    getFiles(opts) {
        const allFiles = common_server_1.getAllFiles({
            ...opts,
            withFileTypes: true
        });
        return allFiles;
    }
    async execute(opts) {
        const ctx = "execute";
        this.props = this.cleanOpts(opts);
        this.L.info({ ctx, props: this.props, msg: "enter" });
        const stats = {
            numChanged: 0
        };
        const { limit, root, rule } = this.props;
        const allFiles = this.getFiles({ ...this.props });
        // return Promise.all(
        return allFiles.map(dirent => {
            var _a;
            const { name: fname } = dirent;
            if (stats.numChanged > limit) {
                this.L.info(`reached limit of ${limit} changes`);
                return;
            }
            const fpath = path_1.default.join(root, fname);
            const out = this.readFile(fpath);
            // edit file
            const { isMatch, matchData } = this.matchFile(out);
            if (isMatch) {
                this.L.info({ ctx, msg: "matchFile", fname, matchData });
                if (!((_a = this.props) === null || _a === void 0 ? void 0 : _a.dryRun)) {
                    const cleanFile = this.refactorFile(out, rule, matchData);
                    this.writeFile(fpath, cleanFile);
                }
                stats.numChanged += 1;
            }
        });
        //);
    }
}
exports.RefactorBaseCommand = RefactorBaseCommand;
//# sourceMappingURL=refactorBase.js.map