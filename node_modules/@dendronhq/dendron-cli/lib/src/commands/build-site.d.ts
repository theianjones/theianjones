import { DendronSiteConfig, DEngineClientV2 } from "@dendronhq/common-all";
import yargs from "yargs";
import { SoilCommand, SoilCommandCLIOpts, SoilCommandOpts } from "./soil";
declare type CommandOutput = {
    buildNotesRoot: string;
};
declare type CommandCLIOpts = SoilCommandCLIOpts & {
    writeStubs?: boolean;
    incremental?: boolean;
    dryRun?: boolean;
};
export { CommandCLIOpts as BuildSiteCommandCLIOpts };
declare type CommandOpts = SoilCommandOpts & {
    config: DendronSiteConfig;
    writeStubs: boolean;
    incremental?: boolean;
    dryRun?: boolean;
};
declare type Jekyll2MdFileErrors = {
    source: string;
    links: string[];
};
export declare class BuildSiteCommand extends SoilCommand<CommandCLIOpts, CommandOpts, CommandOutput> {
    buildArgs(args: yargs.Argv): void;
    enrichArgs(args: CommandCLIOpts): any;
    static buildCmd(yargs: yargs.Argv): yargs.Argv;
    copyAssetsFallback(opts: {
        vaultAssetsDir: string;
        siteAssetsDir: string;
    }): Promise<unknown>;
    copyAssets(opts: {
        vaultAssetsDir: string;
        siteAssetsDir: string;
    }): Promise<unknown>;
    doBuildV2(opts: {
        engineClient: DEngineClientV2;
        config: DendronSiteConfig;
        writeStubs: boolean;
        notesDir: string;
    }): Promise<Jekyll2MdFileErrors[]>;
    execute(opts: CommandOpts): Promise<{
        buildNotesRoot: string;
        errors: Jekyll2MdFileErrors[];
    }>;
}
