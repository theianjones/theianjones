"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SoilCommandV3 = exports.SoilCommandV2 = exports.SoilCommand = void 0;
const common_server_1 = require("@dendronhq/common-server");
const engine_server_1 = require("@dendronhq/engine-server");
const base_1 = require("./base");
// @ts-ignore
class SoilCommand extends base_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.eval = (args) => {
            const opts = this.enrichArgs(args);
            return opts.engineClient.init().then(() => {
                return this.execute(opts);
            });
        };
    }
    buildArgs(args) {
        args.option("wsRoot", {
            describe: "location of workspace",
            demandOption: true,
        });
        args.option("vault", {
            describe: "location of vault",
            demandOption: true,
        });
    }
    _enrichArgs(args) {
        let { vault, wsRoot } = args;
        const logger = this.L;
        const engineClient = engine_server_1.DendronEngineV2.createV3({
            vaults: [{ fsPath: vault }],
            wsRoot,
            logger,
        });
        const cwd = process.cwd();
        wsRoot = common_server_1.resolvePath(wsRoot, cwd);
        vault = common_server_1.resolvePath(vault, cwd);
        return {
            ...args,
            engineClient,
            wsRoot,
        };
    }
}
exports.SoilCommand = SoilCommand;
class SoilCommandV2 extends base_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.eval = (args) => {
            const opts = this.enrichArgs(args);
            return opts.engine.init().then(() => {
                return this.execute(opts);
            });
        };
    }
    buildArgs(args) {
        args.option("wsRoot", {
            describe: "location of workspace",
            demandOption: true,
        });
        args.option("vault", {
            describe: "location of vault",
            demandOption: true,
        });
    }
    _enrichArgs(args) {
        let { vault, wsRoot } = args;
        const cwd = process.cwd();
        wsRoot = common_server_1.resolvePath(wsRoot, cwd);
        vault = common_server_1.resolvePath(vault, cwd);
        const logger = this.L;
        const engine = engine_server_1.DendronEngineV2.createV3({
            vaults: [{ fsPath: vault }],
            logger,
            wsRoot,
        });
        return {
            ...args,
            engine,
            wsRoot,
        };
    }
}
exports.SoilCommandV2 = SoilCommandV2;
class SoilCommandV3 extends base_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.eval = async (args) => {
            const opts = await this.enrichArgs(args);
            return opts.engine.init().then(() => {
                return this.execute(opts);
            });
        };
        // _enrichArgs(args: TCLIOpts): CommandOptsV2 {
        //   let { vault, wsRoot } = args;
        //   const cwd = process.cwd();
        //   wsRoot = resolvePath(wsRoot, cwd);
        //   vault = resolvePath(vault, cwd);
        //   const logger = this.L;
        //   return {
        //     ...args,
        //     engine,
        //     wsRoot,
        //   };
        // }
    }
    buildArgs(args) {
        args.option("wsRoot", {
            describe: "location of workspace",
            demandOption: true,
        });
        args.option("vaults", {
            describe: "location of vault",
            type: "array",
            demandOption: false,
        });
    }
}
exports.SoilCommandV3 = SoilCommandV3;
//# sourceMappingURL=soil.js.map