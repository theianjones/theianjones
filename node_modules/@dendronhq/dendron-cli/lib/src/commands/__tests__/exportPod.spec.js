"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_server_1 = require("@dendronhq/common-server");
const common_test_utils_1 = require("@dendronhq/common-test-utils");
const pods_core_1 = require("@dendronhq/pods-core");
const fs_extra_1 = require("fs-extra");
const path_1 = __importDefault(require("path"));
const exportPod_1 = require("../exportPod");
describe("exportPod", () => {
    let vault;
    let podsDir;
    let wsRoot;
    test("json export, no config", async () => {
        try {
            await exportPod_1.ExportPodCLICommand.run({
                podId: pods_core_1.JSONExportPod.id,
                wsRoot,
                vault,
            });
        }
        catch (err) {
            expect(err.message === "no config");
        }
    });
    test("config present, default", async () => {
        const preset = common_test_utils_1.PODS_CORE.JSON.EXPORT.BASIC;
        const fakePod = () => {
            return {
                config: [],
                execute: async ({ wsRoot, config, vaults }) => {
                    const podClass = pods_core_1.JSONExportPod;
                    const configPath = pods_core_1.PodUtils.getConfigPath({ podsDir, podClass });
                    fs_extra_1.ensureDirSync(path_1.default.dirname(configPath));
                    common_server_1.writeYAML(configPath, config);
                    await exportPod_1.ExportPodCLICommand.run({
                        podId: pods_core_1.JSONExportPod.id,
                        wsRoot,
                        vault: vaults[0].fsPath,
                    });
                },
            };
        };
        // @ts-ignore
        const { opts, resp } = await common_test_utils_1.runEngineTestV4(preset.testFunc, {
            ...preset,
            createEngine: common_test_utils_1.createMockEngine,
            expect,
            setupOnly: true,
            extra: { pod: fakePod() },
        });
        preset.genTestResults({ ...opts, extra: resp });
    });
});
//# sourceMappingURL=exportPod.spec.js.map