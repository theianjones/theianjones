"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_server_1 = require("@dendronhq/common-server");
const common_test_utils_1 = require("@dendronhq/common-test-utils");
const pods_core_1 = require("@dendronhq/pods-core");
const fs_extra_1 = __importStar(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const importPod_1 = require("../importPod");
const { createFiles } = common_test_utils_1.FileTestUtils;
describe("markdown pod", async () => {
    let importSrc;
    let wsRoot;
    let vault;
    beforeEach(async function () {
        importSrc = common_server_1.tmpDir().name;
        wsRoot = common_server_1.tmpDir().name;
        vault = common_server_1.tmpDir().name;
        await common_test_utils_1.NodeTestUtilsV2.createNotes({ vaultPath: vault });
        await createFiles(importSrc, [
            { path: "project/p2/n1.md" },
            { path: "project/p1/n1.md" },
            { path: "project/p1/n2.md" },
            { path: "project/p1/.DS_STORE_TEST" },
            { path: "project/p1/n3.pdf" },
            { path: "project/p1/n1.pdf" },
            { path: "project/p1/n1.pdf" },
            { path: "project/p.3/n1.md" },
        ]);
    });
    test("file import, no config", async () => {
        try {
            await importPod_1.ImportPodCLICommand.run({
                podId: pods_core_1.MarkdownImportPod.id,
                wsRoot,
                vault,
            });
        }
        catch (err) {
            expect(err.message === "no config");
        }
    });
    test("config present, default", async () => {
        const podsDir = path_1.default.join(wsRoot, "pods");
        const podClass = pods_core_1.MarkdownImportPod;
        const configPath = pods_core_1.PodUtils.getConfigPath({ podsDir, podClass });
        fs_extra_1.ensureDirSync(path_1.default.dirname(configPath));
        common_server_1.writeYAML(configPath, { src: importSrc });
        const cmd = await importPod_1.ImportPodCLICommand.run({
            podId: pods_core_1.MarkdownImportPod.id,
            wsRoot,
            vault,
        });
        cmd.L.info({ msg: "in test file" });
        // @ts-ignore
        let [expectedFiles, actualFiles] = common_test_utils_1.FileTestUtils.cmpFiles(vault, [
            "assets",
            "project.p1.md",
            "project.p1.n1.md",
            "project.p1.n2.md",
            "project.p2.n1.md",
            "project.p-3.n1.md",
            "root.md",
        ]);
        expect(expectedFiles).toEqual(actualFiles);
        const assetsDir = fs_extra_1.default.readdirSync(path_1.default.join(vault, "assets"));
        expect(assetsDir.length).toEqual(2);
        const fileBody = fs_extra_1.default.readFileSync(path_1.default.join(vault, "project.p1.md"), {
            encoding: "utf8",
        });
        expect(fileBody.match("n1.pdf")).toBeTruthy();
        expect(fileBody.match("n3.pdf")).toBeTruthy();
    });
});
//# sourceMappingURL=importPod.spec.js.map