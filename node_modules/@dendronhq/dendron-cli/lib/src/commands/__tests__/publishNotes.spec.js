"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_server_1 = require("@dendronhq/common-server");
const common_test_utils_1 = require("@dendronhq/common-test-utils");
const engine_server_1 = require("@dendronhq/engine-server");
const path_1 = __importDefault(require("path"));
const publishNotes_1 = require("../publishNotes");
describe("publishNotes", async () => {
    let wsRoot;
    let vault;
    // @ts-ignore
    let siteRootDir;
    beforeEach(async () => {
        wsRoot = common_server_1.tmpDir().name;
        siteRootDir = common_server_1.tmpDir().name;
        const { vaults } = await common_test_utils_1.EngineTestUtilsV2.setupWS({
            initDirCb: async (root) => {
                await new engine_server_1.WorkspaceService({ wsRoot }).createVault({
                    vault: { fsPath: root },
                });
                common_test_utils_1.NodeTestUtilsV2.createNotes({
                    vaultPath: root,
                    noteProps: [
                        { id: "id-foo", fname: "foo", stub: true },
                        { id: "id-bar", fname: "bar" },
                    ],
                });
            },
        });
        vault = vaults[0];
        await engine_server_1.DConfig.getOrCreate(wsRoot);
    });
    test("publish, no push", async () => {
        const { buildNotesRoot } = await publishNotes_1.PublishNotesCommand.run({
            wsRoot,
            vault,
            noPush: true,
        });
        const notesDir = path_1.default.join(buildNotesRoot, "notes");
        common_test_utils_1.FileTestUtils.cmpFiles(notesDir, ["id-bar.md", "id-foo.md", "root.md"]);
    });
    test("publish but no git", async () => {
        try {
            await publishNotes_1.PublishNotesCommand.run({
                wsRoot,
                vault,
            });
        }
        catch (err) {
            expect(err.message).toEqual("no repo found");
        }
    });
    test("publish, ok", async () => {
        await engine_server_1.Git.createRepo(wsRoot, { initCommit: true });
        const { buildNotesRoot } = await publishNotes_1.PublishNotesCommand.run({
            wsRoot,
            vault,
            noPush: true,
        });
        const notesDir = path_1.default.join(buildNotesRoot, "notes");
        common_test_utils_1.FileTestUtils.cmpFiles(notesDir, ["id-bar.md", "id-foo.md", "root.md"]);
    });
});
//# sourceMappingURL=publishNotes.spec.js.map