"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublishPodCLICommand = void 0;
const common_server_1 = require("@dendronhq/common-server");
const pods_core_1 = require("@dendronhq/pods-core");
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const pod_1 = require("./pod");
const soil_1 = require("./soil");
function buildPodArgs(args, _podItems) {
    args.option("podId", {
        describe: "pod to use",
    });
    args.option("noteByName", {
        describe: "name of note",
    });
    args.option("config", {
        describe: "path to custom config",
    });
    args.option("config", {
        describe: "configuration to use",
    });
}
function enrichPodArgs(args, pods, podType) {
    const { podId, wsRoot, podSource, config } = lodash_1.default.defaults(args, {
        podSource: "builtin",
    });
    const podsDir = path_1.default.join(wsRoot, "pods");
    const podClass = pod_1.fetchPodClassV4(podId, { podSource, pods, podType });
    let cleanConfig;
    if (config) {
        cleanConfig = common_server_1.readYAML(config);
    }
    else {
        cleanConfig = pods_core_1.PodUtils.getConfig({ podsDir, podClass });
    }
    return {
        podClass,
        config: cleanConfig,
    };
}
class PublishPodCLICommand extends soil_1.SoilCommandV2 {
    buildArgs(args) {
        super.buildArgs(args);
        buildPodArgs(args, []);
    }
    enrichArgs(args) {
        const opts = super._enrichArgs(args);
        const opts2 = enrichPodArgs({ ...args, ...opts }, pods_core_1.getAllPublishPods(), "publish");
        return { ...opts, ...opts2, noteByName: args.noteByName };
    }
    static buildCmd(yargs) {
        const _cmd = new PublishPodCLICommand();
        return yargs.command("publishPod", "publish pod", _cmd.buildArgs, _cmd.eval);
    }
    async execute(opts) {
        const { podClass, vault, wsRoot, engine, config, noteByName: fname } = opts;
        const pod = new podClass();
        await pod.execute({
            config: { ...config, fname },
            vaults: [{ fsPath: vault }],
            wsRoot,
            engine,
        });
        return {};
    }
}
exports.PublishPodCLICommand = PublishPodCLICommand;
//# sourceMappingURL=PublishPodCLICommand.js.map