/// <reference types="node" />
import { Dirent } from "fs-extra";
import { BaseCommand } from "./base";
export declare type RefactorCommandOpts = {
    dryRun?: boolean;
    exclude?: string[];
    include?: string[];
    /**
     * Perform up to limit changes
     */
    limit?: number;
    root: string;
    rule: RefactorRule;
};
export declare type RefactorRule = {
    name?: string;
    operation: "add" | "remove" | "title2time";
    data: any;
};
export declare abstract class RefactorBaseCommand<TFile, TMatchData> extends BaseCommand<RefactorCommandOpts> {
    props?: Required<RefactorCommandOpts>;
    abstract readFile(fpath: string): TFile;
    abstract writeFile(fpath: string, data: TFile): void;
    cleanOpts(opts: RefactorCommandOpts): {
        include: string[];
        exclude: never[];
        dryRun: boolean;
        limit: number;
    } & RefactorCommandOpts;
    getFiles(opts: Required<Pick<RefactorCommandOpts, "root" | "exclude" | "include">>): Dirent[];
    abstract matchFile(file: TFile): {
        isMatch: boolean;
        matchData?: TMatchData;
    };
    abstract refactorFile(file: TFile, rule: RefactorRule, matchData?: TMatchData): TFile;
    execute(opts: RefactorCommandOpts): Promise<void[]>;
}
