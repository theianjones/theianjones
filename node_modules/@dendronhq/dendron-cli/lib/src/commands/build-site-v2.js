"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildSiteCommandV2 = void 0;
const common_server_1 = require("@dendronhq/common-server");
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const launchEngineServer_1 = require("./launchEngineServer");
const soil_1 = require("./soil");
class BuildSiteCommandV2 extends soil_1.SoilCommandV3 {
    buildArgs(args) {
        super.buildArgs(args);
        args.option("serve", {
            describe: "serve over local http server",
            default: false,
            type: "boolean",
        });
        args.option("stage", {
            describe: "serve over local http server",
            default: "dev",
            choices: ["dev", "prod"],
        });
        args.option("servePort", {
            describe: "port to serve over",
            default: "8080",
        });
    }
    async enrichArgs(args) {
        let { wsRoot, engine, port, serve, stage, servePort } = args;
        if (engine) {
            return {
                ...args,
                engine,
                wsRoot,
                port: port,
                serve,
                stage,
                servePort,
            };
        }
        else {
            const launchEngineOpts = await new launchEngineServer_1.LaunchEngineServerCommand().enrichArgs(args);
            return {
                ...launchEngineOpts,
                serve,
                stage,
                servePort,
            };
        }
    }
    static buildCmd(yargs) {
        const _cmd = new BuildSiteCommandV2();
        return yargs.command("buildSiteV2", "build notes for publication using 11ty", _cmd.buildArgs, _cmd.eval);
    }
    async execute(opts) {
        let { wsRoot, port, stage, cwd, servePort } = lodash_1.default.defaults(opts, {
            cwd: path_1.default.join(common_server_1.goUpTo(__dirname, "node_modules"), "node_modules", "@dendronhq", "dendron-11ty"),
        });
        process.env["ENGINE_PORT"] = lodash_1.default.toString(port);
        process.env["WS_ROOT"] = wsRoot;
        process.env["STAGE"] = stage;
        process.env["ELEV_PORT"] = lodash_1.default.toString(servePort);
        const { compile } = require("@dendronhq/dendron-11ty");
        await compile({ cwd }, { serve: opts.serve, port: servePort });
        return {};
    }
}
exports.BuildSiteCommandV2 = BuildSiteCommandV2;
//# sourceMappingURL=build-site-v2.js.map