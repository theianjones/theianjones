import { DendronEngineV2 } from "@dendronhq/engine-server";
import { PodClassEntryV4, PodItemV4, PodKind } from "@dendronhq/pods-core";
import yargs from "yargs";
import { BaseCommand } from "./base";
declare type CommandOpts = {
    engineClient: DendronEngineV2;
    podClass: PodClassEntryV4;
    config: any;
    wsRoot: string;
};
declare type CommandOutput = void;
export declare function fetchPodClassV4(podId: string, opts: {
    podSource: CommandCLIOpts["podSource"];
    pods?: PodClassEntryV4[];
    podType: PodKind;
}): any;
export declare type CommandCLIOpts = {
    podId: string;
    wsRoot: string;
    vault: string;
    podSource?: "remote" | "builtin";
};
export declare abstract class PodCLICommand extends BaseCommand<CommandOpts, CommandOutput> {
    static buildArgsCore(args: yargs.Argv<CommandCLIOpts>, _podItems: PodItemV4[]): Promise<void>;
    enrichArgs(args: CommandCLIOpts, pods: PodClassEntryV4[], podType: "import" | "export"): Promise<CommandOpts>;
    execute(opts: CommandOpts): Promise<void>;
}
export {};
