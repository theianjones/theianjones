"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackfillV2Command = void 0;
const common_all_1 = require("@dendronhq/common-all");
const lodash_1 = __importDefault(require("lodash"));
const base_1 = require("./base");
class BackfillV2Command extends base_1.BaseCommand {
    async execute(opts) {
        const { engine, overwriteFields } = lodash_1.default.defaults(opts, {
            overwriteFields: [],
        });
        const notes = await Promise.all(lodash_1.default.values(engine.notes)
            .filter((n) => !n.stub)
            .map(async (n) => {
            overwriteFields.forEach((f) => {
                if (f === "title") {
                    n.title = common_all_1.NoteUtilsV2.genTitle(n.fname);
                }
                else {
                    throw Error(`unknown overwrite field: ${f}`);
                }
            });
            return n;
        }));
        // @ts-ignore
        await engine.store.bulkAddNotes({ notes });
        return;
    }
}
exports.BackfillV2Command = BackfillV2Command;
//# sourceMappingURL=backfillV2.js.map