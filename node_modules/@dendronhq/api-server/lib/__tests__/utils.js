"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runTest = void 0;
const common_server_1 = require("@dendronhq/common-server");
const common_test_utils_1 = require("@dendronhq/common-test-utils");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
async function setupAPI({ wsRoot, vault }) {
    const payload = {
        uri: wsRoot,
        config: {
            vaults: [vault],
        },
    };
    const api = new common_server_1.DendronAPI({
        endpoint: "http://localhost:3005",
        apiPath: "api",
    });
    await api.workspaceInit(payload);
    return api;
}
async function runTest(cb) {
    const wsRoot = common_server_1.tmpDir().name;
    const vaultString = path_1.default.join(wsRoot, "vault");
    const vault = { fsPath: vaultString };
    fs_extra_1.default.ensureDirSync(vaultString);
    await common_test_utils_1.EngineTestUtilsV2.setupVault({
        vaultDir: vault.fsPath,
        initDirCb: async (vaultPath) => {
            await common_test_utils_1.NodeTestPresetsV2.createOneNoteOneSchemaPreset({
                vaultDir: vaultPath,
            });
        },
    });
    const api = await setupAPI({ wsRoot, vault: vaultString });
    await cb({ wsRoot, vaults: [vault], api });
}
exports.runTest = runTest;
//# sourceMappingURL=utils.js.map