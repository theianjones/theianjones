import { ConfigWriteOpts, RespV2 } from "@dendronhq/common-all";
import { ConfigGetPayload, DendronError, DEngineDeleteSchemaPayloadV2, DEngineQuery, DNodePropsV2, EngineDeleteNotePayload, EngineDeleteOptsV2, EngineQueryNoteResp, EngineUpdateNodesOptsV2, EngineWriteOptsV2, GetNoteOptsV2, GetNotePayloadV2, NotePropsDictV2, NotePropsV2, RenameNoteOptsV2, RenameNotePayload, SchemaModuleDictV2, SchemaModulePropsV2, WriteNoteResp } from "@dendronhq/common-all";
export declare type APIErrorType = "does_not_exist_error" | "not_authorized_error" | "unknown_error" | "invalid_request_error";
export interface IAPIErrorArgs {
    type: APIErrorType;
    message?: string;
    code?: number;
}
interface IRequestArgs {
    headers: any;
}
interface IAPIPayload {
    data: null | any | any[];
    error: null | DendronError;
}
interface IAPIOpts {
    endpoint: string;
    apiPath: string;
    _request: any;
    logger: any;
    statusHandlers: any;
    onAuth: (opts: IRequestArgs) => Promise<any>;
    onBuildHeaders: ({}: IRequestArgs) => Promise<any>;
    onError: ({}: {
        err: DendronError;
        body: any;
        resp: any;
        headers: any;
        qs: any;
        path: string;
        method: string;
    }) => any;
}
declare type IAPIConstructor = {
    endpoint: string;
    apiPath: string;
} & Partial<IAPIOpts>;
interface IDoRequestArgs {
    path: string;
    auth?: boolean;
    qs?: any;
    body?: any;
    method?: "get" | "post";
    json?: boolean;
}
declare type APIPayload<T = any> = {
    error: DendronError | null;
    data?: T;
};
export declare type WorkspaceInitRequest = {
    uri: string;
    config: {
        vaults: string[];
    };
};
export declare type WorkspaceSyncRequest = WorkspaceRequest;
export declare type WorkspaceRequest = {
    ws: string;
};
export declare type EngineQueryRequest = DEngineQuery & {
    ws: string;
};
export declare type EngineGetNoteByPathRequest = GetNoteOptsV2 & {
    ws: string;
};
export declare type EngineRenameNoteRequest = RenameNoteOptsV2 & {
    ws: string;
};
export declare type EngineUpdateNoteRequest = {
    ws: string;
} & {
    note: NotePropsV2;
    opts?: EngineUpdateNodesOptsV2;
};
export declare type EngineWriteRequest = {
    node: DNodePropsV2;
    opts?: EngineWriteOptsV2;
} & {
    ws: string;
};
export declare type EngineDeleteRequest = {
    id: string;
    opts?: EngineDeleteOptsV2;
} & {
    ws: string;
};
export declare type NoteQueryRequest = {
    qs: string;
} & Partial<WorkspaceRequest>;
export declare type SchemaDeleteRequest = {
    id: string;
    opts?: EngineDeleteOptsV2;
} & Partial<WorkspaceRequest>;
export declare type SchemaReadRequest = {
    id: string;
} & Partial<WorkspaceRequest>;
export declare type SchemaQueryRequest = {
    qs: string;
} & Partial<WorkspaceRequest>;
export declare type SchemaWriteRequest = {
    schema: SchemaModulePropsV2;
} & WorkspaceRequest;
export declare type SchemaUpdateRequest = SchemaWriteRequest;
export declare type InitializePayload = APIPayload<{
    notes: NotePropsDictV2;
    schemas: SchemaModuleDictV2;
}>;
export declare type WorkspaceSyncPayload = InitializePayload;
export declare type EngineQueryPayload = APIPayload<DNodePropsV2[]>;
export declare type EngineGetNoteByPathPayload = APIPayload<GetNotePayloadV2>;
export declare type EngineRenameNotePayload = APIPayload<RenameNotePayload>;
export declare type EngineUpdateNotePayload = APIPayload<void>;
export declare type EngineDeletePayload = APIPayload<EngineDeleteNotePayload>;
export declare type SchemaDeletePayload = APIPayload<DEngineDeleteSchemaPayloadV2>;
export declare type SchemaReadPayload = APIPayload<SchemaModulePropsV2>;
export declare type SchemaQueryPayload = APIPayload<SchemaModulePropsV2[]>;
export declare type SchemaWritePayload = APIPayload<void>;
export declare type SchemaUpdatePayload = APIPayload<void>;
export declare abstract class API {
    opts: IAPIOpts;
    constructor(opts: IAPIConstructor);
    _log(msg: any, lvl?: "info" | "debug" | "error" | "fatal"): void;
    _createPayload(data: any): {
        error: null;
        data: any;
    };
    _doRequest({ auth, qs, path, body, method, json, }: IDoRequestArgs): Promise<any>;
    _makeRequest<T extends IAPIPayload>(args: IDoRequestArgs, paylaodData?: T["data"]): Promise<T>;
}
export declare class DendronAPI extends API {
    static instance: DendronAPI;
    configGet(req: WorkspaceRequest): Promise<APIPayload<ConfigGetPayload>>;
    configWrite(req: ConfigWriteOpts & WorkspaceRequest): Promise<RespV2<void>>;
    workspaceInit(req: WorkspaceInitRequest): Promise<InitializePayload>;
    workspaceList(): Promise<InitializePayload>;
    workspaceSync(req: WorkspaceSyncRequest): Promise<InitializePayload>;
    engineDelete(req: EngineDeleteRequest): Promise<EngineDeletePayload>;
    engineGetNoteByPath(req: EngineGetNoteByPathRequest): Promise<EngineGetNoteByPathPayload>;
    engineRenameNote(req: EngineRenameNoteRequest): Promise<EngineRenameNotePayload>;
    engineUpdateNote(req: EngineUpdateNoteRequest): Promise<EngineUpdateNotePayload>;
    engineWrite(req: EngineWriteRequest): Promise<WriteNoteResp>;
    noteQuery(req: NoteQueryRequest): Promise<EngineQueryNoteResp>;
    schemaDelete(req: SchemaDeleteRequest): Promise<SchemaDeletePayload>;
    schemaRead(req: SchemaReadRequest): Promise<SchemaReadPayload>;
    schemaQuery(req: SchemaQueryRequest): Promise<SchemaQueryPayload>;
    schemaWrite(req: SchemaWriteRequest): Promise<SchemaWritePayload>;
    schemaUpdate(req: SchemaUpdateRequest): Promise<SchemaUpdatePayload>;
}
export {};
