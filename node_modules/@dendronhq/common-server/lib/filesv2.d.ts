/// <reference types="node" />
import { DVault, NotePropsV2, SchemaModuleOptsV2, SchemaModulePropsV2 } from "@dendronhq/common-all";
import { FSWatcher } from "fs";
import tmp, { DirResult } from "tmp";
declare type FileWatcherCb = {
    fpath: string;
};
declare type CreateFileWatcherOpts = {
    fpath: string;
    numTries?: number;
    onChange: (opts: FileWatcherCb) => Promise<any>;
    onCreate: (opts: FileWatcherCb) => Promise<any>;
};
declare type CreateFileWatcherResp = {
    watcher: FSWatcher;
    didCreate: boolean;
};
export declare function createFileWatcher(opts: CreateFileWatcherOpts): Promise<CreateFileWatcherResp>;
export declare function file2Schema(fpath: string): SchemaModulePropsV2;
export declare function string2Schema({ vault, content, fname, }: {
    vault: DVault;
    content: string;
    fname: string;
}): SchemaModulePropsV2;
export declare function string2Note({ content, fname, vault, }: {
    content: string;
    fname: string;
    vault: DVault;
}): import("@dendronhq/common-all").DNodePropsV2<any, any>;
export declare function file2Note(fpath: string, vault: DVault): NotePropsV2;
export declare function goUpTo(base: string, fname?: string): string;
export declare function note2File({ note, vault, wsRoot, opts, }: {
    note: NotePropsV2;
    vault: DVault;
    wsRoot: string;
    opts?: {
        writeHierarchy?: boolean;
    };
}): Promise<void>;
export declare function schemaModuleOpts2File(schemaFile: SchemaModuleOptsV2, vaultPath: string, fname: string): Promise<void>;
export declare function schemaModuleProps2File(schemaMProps: SchemaModulePropsV2, vpath: string, fname: string): Promise<void>;
export declare function assignJSONWithComment(jsonObj: any, dataToAdd: any): any;
export declare function readJSONWithComments(fpath: string): Promise<any>;
export declare function tmpDir(): DirResult;
export declare const vault2Path: ({ vault, wsRoot, }: {
    vault: DVault;
    wsRoot: string;
}) => string;
export declare function writeJSONWithComments(fpath: string, data: any): void;
export { tmp, DirResult };
export declare class VaultUtils {
    static getName(vault: DVault): string;
    static isEqual(vaultSrc: DVault, vaultCmp: DVault, wsRoot: string): boolean;
    static getByVaultPath({ wsRoot, vaults, vaultPath, }: {
        wsRoot: string;
        vaultPath: string;
        vaults: DVault[];
    }): DVault;
    static getVaultByNotePathV4({ vaults, fsPath, }: {
        /**
         * Path to note
         */
        fsPath: string;
        wsRoot: string;
        vaults: DVault[];
    }): DVault;
    static normVaultPath: (opts: {
        vault: DVault;
        wsRoot: string;
    }) => string;
}
