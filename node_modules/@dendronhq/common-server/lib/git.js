"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitUtils = exports.simpleGit = void 0;
const common_all_1 = require("@dendronhq/common-all");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const simple_git_1 = __importDefault(require("simple-git"));
exports.simpleGit = simple_git_1.default;
const files_1 = require("./files");
const filesv2_1 = require("./filesv2");
// comment
class GitUtils {
    static getRepoNameFromURL(url) {
        return path_1.default.basename(url, ".git");
    }
    static getVaultFromRepo(opts) {
        const { repoPath, wsRoot } = opts;
        return {
            fsPath: path_1.default.relative(wsRoot, repoPath),
            remote: { type: "git", url: opts.repoUrl },
        };
    }
    static getVaultsFromRepo(opts) {
        const { repoPath, wsRoot } = opts;
        // is workspace root
        if (fs_extra_1.default.existsSync(path_1.default.join(repoPath, common_all_1.CONSTANTS.DENDRON_CONFIG_FILE))) {
            const config = files_1.readYAML(path_1.default.join(repoPath, common_all_1.CONSTANTS.DENDRON_CONFIG_FILE));
            const vaults = config.vaults.map((ent) => {
                const vpath = filesv2_1.vault2Path({ vault: ent, wsRoot: repoPath });
                return {
                    ...ent,
                    fsPath: path_1.default.relative(wsRoot, vpath),
                };
            });
            return {
                vaults,
            };
        }
        else {
            return {
                vaults: [
                    {
                        fsPath: path_1.default.relative(wsRoot, repoPath),
                        remote: { type: "git", url: opts.repoUrl },
                    },
                ],
            };
        }
    }
    static isRepo(src) {
        return fs_extra_1.default.existsSync(src) && fs_extra_1.default.existsSync(path_1.default.join(src, ".git"));
    }
}
exports.GitUtils = GitUtils;
//# sourceMappingURL=git.js.map