"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runEngineTestV4 = exports.TestPresetEntryV4 = exports.createMockEngine = exports.createEngineFactoryFactory = void 0;
const lodash_1 = __importDefault(require("lodash"));
const _1 = require(".");
exports.createEngineFactoryFactory = ({ overrides, EngineClass, }) => {
    const createEngine = (opts) => {
        const engine = new EngineClass();
        lodash_1.default.map(overrides || {}, (method, key) => {
            // @ts-ignore
            engine[key] = method(opts);
        });
        return engine;
    };
    return createEngine;
};
class MockEngineClass {
    async init() { }
}
exports.createMockEngine = exports.createEngineFactoryFactory({
    EngineClass: MockEngineClass,
});
class TestPresetEntryV4 {
    constructor(func, opts) {
        let { preSetupHook, postSetupHook, extraOpts, setupTest, genTestResults } = opts || {};
        this.preSetupHook = preSetupHook ? preSetupHook : async () => { };
        this.postSetupHook = postSetupHook ? postSetupHook : async () => { };
        this.testFunc = lodash_1.default.bind(func, this);
        this.extraOpts = extraOpts;
        this.setupTest = setupTest;
        this.genTestResults = lodash_1.default.bind(genTestResults ? genTestResults : async () => [], this);
        //_.bindAll(this, ['genTestResults'])
    }
}
exports.TestPresetEntryV4 = TestPresetEntryV4;
/**
 * Run engine test with relative vaults
 */
async function runEngineTestV4(func, opts) {
    const { preSetupHook, createEngine, extra } = lodash_1.default.defaults(opts, {
        preSetupHook: async ({}) => { },
        postSetupHook: async ({}) => { },
        extra: {},
    });
    const { wsRoot, vaults } = await _1.EngineTestUtilsV4.setupWS();
    await preSetupHook({ wsRoot, vaults: vaults });
    const engine = createEngine({ wsRoot, vaults: vaults });
    const initResp = await engine.init();
    const testOpts = { wsRoot, vaults, engine, initResp, extra };
    if (opts.setupOnly) {
        if (!opts.preSetupHook) {
            throw Error("no pre setup hook");
        }
        return { opts: testOpts, resp: opts.preSetupHook(testOpts) };
    }
    // const resp = await postSetupHook({wsRoot, vaults, engine})
    const results = (await func(testOpts)) || [];
    await _1.runJestHarnessV2(results, expect);
    return { opts: testOpts, resp: undefined };
}
exports.runEngineTestV4 = runEngineTestV4;
//# sourceMappingURL=utilsv2.js.map