/// <reference types="jest" />
import { DVault, NoteChangeEntry, NoteOptsV2, NotePropsDictV2, NotePropsV2, SchemaModuleOptsV2, SchemaModulePropsV2, SchemaPropsV2, WorkspaceOpts } from "@dendronhq/common-all";
import { PreSetupHookFunctionV4, TestResult } from "./types";
export * from "./fileUtils";
export * from "./noteUtils";
export * from "./presets";
export * from "./types";
export * from "./utils";
export * from "./utilsv2";
import { TestPresetEntry } from "./utils";
import sinon from "sinon";
export { sinon };
declare type InitVaultFunc = (vaultPath: string) => void;
export declare type SetupVaultOpts = {
    vaultDir?: string;
    initDirCb?: (vaultPath: string) => void;
    withAssets?: boolean;
    withGit?: boolean;
};
export declare type SetupWSOpts = {
    initDirCb?: (vaultPath: string) => void;
    withAssets?: boolean;
    withGit?: boolean;
    wsRoot?: string;
    vaultDir?: string;
};
declare type SetupVaultsOptsV3 = Omit<SetupVaultOpts, "initDirCb"> & {
    wsRoot: string;
    vaults?: DVault[];
    initVault1?: InitVaultFunc;
    initVault2?: InitVaultFunc;
};
declare type SetupWSOptsV3 = Omit<SetupVaultsOptsV3, "wsRoot"> & {
    wsRoot?: string;
};
/**
 * Relative vaults
 */
export declare type SetupVaultsOptsV4 = {
    preSetupHook?: PreSetupHookFunctionV4;
    vault: DVault;
};
export declare class EngineTestUtilsV4 {
    static setupWS(opts?: {
        wsRoot?: string;
    } & {
        setupVaultsOpts?: SetupVaultsOptsV4[];
    }): Promise<WorkspaceOpts>;
    static setupVault(opts: SetupVaultsOptsV4 & {
        wsRoot: string;
    }): Promise<DVault>;
}
/**
 * Legacy Multi-vault setup
 */
export declare class EngineTestUtilsV3 {
    static setupWS(opts: SetupWSOptsV3): Promise<{
        wsRoot: string;
        vaults: {
            fsPath: string;
            name: string;
        }[] & DVault[];
    }>;
    static setupVaults(opts: SetupVaultsOptsV3): Promise<{
        fsPath: string;
        name: string;
    }[] & DVault[]>;
}
export declare class EngineTestUtilsV2 {
    static setupWS(opts: SetupWSOpts): Promise<{
        wsRoot: string;
        vaults: string[];
    }>;
    static setupVault(opts: SetupVaultOpts): Promise<string>;
}
export declare class NodeTestUtilsV2 {
    static createNoteProps: (opts: {
        rootName: string;
        vaultPath: string;
        props?: Partial<NotePropsV2>;
    }) => Promise<{
        foo: import("@dendronhq/common-all").DNodePropsV2<any, any>;
        ch1: import("@dendronhq/common-all").DNodePropsV2<any, any>;
    }>;
    static createNote: (opts: {
        withBody?: boolean;
        vaultDir: string;
        noteProps?: Omit<NoteOptsV2, "vault"> & {
            vault?: DVault;
        };
    }) => Promise<NotePropsV2>;
    static createNotes: (opts: {
        withBody?: boolean;
        vaultPath: string;
        noteProps?: (Omit<NoteOptsV2, "vault"> & {
            vault?: DVault;
        })[];
    }) => Promise<NotePropsDictV2>;
    static createSchema: (opts: {
        vaultDir: string;
        fname: string;
        schemas: SchemaPropsV2[];
    }) => Promise<SchemaModulePropsV2>;
    static createSchemas: (opts: {
        vaultPath: string;
        schemaMO?: [SchemaModuleOptsV2, string][];
    }) => Promise<void>;
    static createSchemaModuleOpts: (opts: {
        vaultDir: string;
        rootName: string;
        rootOpts?: Partial<SchemaPropsV2>;
    }) => Promise<SchemaModuleOptsV2>;
    static normalizeNote({ note }: {
        note: NotePropsV2;
    }): Partial<NotePropsV2>;
    static normalizeNotes(notes: NotePropsV2[] | NotePropsDictV2): Partial<NotePropsV2>[];
}
export declare class NodeTestPresetsV2 {
    static runMochaHarness<TOpts>({ opts, results, }: {
        opts: TOpts;
        results: any;
    }): Promise<void[]>;
    static runJestHarness<TOpts>({ opts, results, expect, }: {
        opts: TOpts;
        results: Function;
        expect: jest.Expect;
    }): Promise<void[]>;
    static createNoteRefPreset({ vaultDir }: {
        vaultDir: string;
    }): Promise<void>;
    static createSchemaPreset({ vaultDir }: {
        vaultDir: string;
    }): Promise<void>;
    static createOneNoteOneSchemaPresetWithBody({ vaultDir, }: {
        vaultDir: string;
    }): Promise<void>;
    static createOneNoteOneSchemaPreset({ vaultDir, }: {
        vaultDir: string;
    }): Promise<void>;
}
declare type CreateNoteOpts = {
    vault: DVault;
    fname: string;
    body?: string;
    props?: Partial<Omit<NotePropsV2, "vault|fname|body">>;
    genRandomId?: boolean;
    noWrite?: boolean;
};
export declare class NoteTestUtilsV3 {
    static createNote: (opts: CreateNoteOpts) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
}
declare type NoteTestPresetGroup<TBeforeOpts, TResultsOpts> = {
    [key: string]: TestPresetEntry<TBeforeOpts, any, TResultsOpts>;
};
declare type NoteTestPresetModule<TBeforeOpts, TResultsOpts> = {
    [key: string]: NoteTestPresetGroup<TBeforeOpts, TResultsOpts>;
};
declare type NoteTestPresetCollectionDict<TBeforeOpts = any, TResultsOpts = any> = {
    [key: string]: NoteTestPresetModule<TBeforeOpts, TResultsOpts>;
};
declare type DeleteNoteTestOptsV2 = {
    changed: NoteChangeEntry[];
    notes: NotePropsDictV2;
    vaultDir: string;
};
export declare class NoteTestPresetsV2 {
    static createJestTest({ executeCb, beforeArgs, expect, entry, }: {
        entry: TestPresetEntry<any, any, any>;
        expect: jest.Expect;
        beforeArgs?: any;
        executeCb: () => Promise<any>;
    }): Promise<void>;
    static presets: NoteTestPresetCollectionDict;
    static createDeleteNoteWNoChildrenResults({ changed, notes, vaultDir, }: DeleteNoteTestOptsV2): Promise<TestResult[]>;
}
