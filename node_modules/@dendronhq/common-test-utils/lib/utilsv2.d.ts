import { DEngineClientV2, WorkspaceOpts } from "@dendronhq/common-all";
import { CreateEngineFunction, RunEngineTestFunctionV4, SetupTestFunctionV4, GenTestResults } from ".";
import { PostSetupHookFunction, PreSetupHookFunction, SetupHookFunction } from "./types";
declare type EngineOverride = {
    [P in keyof DEngineClientV2]: (opts: WorkspaceOpts) => DEngineClientV2[P];
};
export declare const createEngineFactoryFactory: ({ overrides, EngineClass, }: {
    EngineClass: any;
    overrides?: Partial<EngineOverride> | undefined;
}) => CreateEngineFunction;
export declare const createMockEngine: CreateEngineFunction;
export declare class TestPresetEntryV4 {
    preSetupHook: PreSetupHookFunction;
    postSetupHook: PostSetupHookFunction;
    testFunc: RunEngineTestFunctionV4;
    extraOpts: any;
    setupTest?: SetupTestFunctionV4;
    genTestResults?: GenTestResults;
    constructor(func: RunEngineTestFunctionV4, opts?: {
        preSetupHook?: PreSetupHookFunction;
        postSetupHook?: PostSetupHookFunction;
        extraOpts?: any;
        setupTest?: SetupTestFunctionV4;
        genTestResults?: GenTestResults;
    });
}
/**
 * Run engine test with relative vaults
 */
export declare function runEngineTestV4(func: RunEngineTestFunctionV4, opts: {
    preSetupHook?: SetupHookFunction;
    postSetupHook?: PostSetupHookFunction;
    createEngine: CreateEngineFunction;
    extra?: any;
    expect: any;
    setupOnly?: boolean;
}): Promise<{
    opts: {
        wsRoot: string;
        vaults: import("@dendronhq/common-all").DVault[];
        engine: Pick<import("@dendronhq/common-all").DEngineV2, "links" | "notes" | "schemas" | "wsRoot" | "configRoot" | "vaultsv3" | "vaults" | "updateNote" | "updateSchema" | "writeNote" | "writeSchema" | "init" | "deleteNote" | "deleteSchema" | "sync" | "getNoteByPath" | "getSchema" | "querySchema" | "queryNotes" | "queryNotesSync" | "renameNote" | "writeConfig" | "getConfig">;
        initResp: Required<import("@dendronhq/common-all").RespV2<import("@dendronhq/common-all").DEngineInitPayloadV2>>;
        extra: any;
    };
    resp: Promise<any>;
} | {
    opts: {
        wsRoot: string;
        vaults: import("@dendronhq/common-all").DVault[];
        engine: Pick<import("@dendronhq/common-all").DEngineV2, "links" | "notes" | "schemas" | "wsRoot" | "configRoot" | "vaultsv3" | "vaults" | "updateNote" | "updateSchema" | "writeNote" | "writeSchema" | "init" | "deleteNote" | "deleteSchema" | "sync" | "getNoteByPath" | "getSchema" | "querySchema" | "queryNotes" | "queryNotesSync" | "renameNote" | "writeConfig" | "getConfig">;
        initResp: Required<import("@dendronhq/common-all").RespV2<import("@dendronhq/common-all").DEngineInitPayloadV2>>;
        extra: any;
    };
    resp: undefined;
}>;
export {};
