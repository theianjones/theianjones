import { DVault } from "@dendronhq/common-all";
import { CreateNoteOptsV4 } from "../noteUtils";
declare type CreateNotePresetOptsV4 = {
    wsRoot: string;
    vault: DVault;
    genRandomId?: boolean;
    fname?: string;
    noWrite?: boolean;
    body?: string;
    props?: CreateNoteOptsV4["props"];
};
export declare const NOTE_BODY_PRESETS_V4: {
    NOTE_REF: string;
    NOTE_REF_TARGET_BODY: string;
};
export declare const NOTE_PRESETS_V4: {
    NOTE_SIMPLE: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_SIMPLE_OTHER: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_SIMPLE_CHILD: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_SIMPLE_GRANDCHILD: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_WITH_CUSTOM_ATT: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_DOMAIN_NAMESPACE: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_DOMAIN_NAMESPACE_CHILD: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_WITH_TARGET: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_WITH_LINK: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_WITH_ALIAS_LINK: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_WITH_ANCHOR_TARGET: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_WITH_ANCHOR_LINK: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_WITH_CAPS_AND_SPACE: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_WITH_NOTE_REF: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_WITH_NOTE_REF_TARGET: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
    NOTE_WITH_NOTE_REF_LINK: {
        create: ({ vault, wsRoot, genRandomId, noWrite, body, fname, props, }: CreateNotePresetOptsV4) => Promise<import("@dendronhq/common-all").DNodePropsV2<any, any>>;
        fname: string;
        selection: [number, number, number, number];
    };
};
export {};
