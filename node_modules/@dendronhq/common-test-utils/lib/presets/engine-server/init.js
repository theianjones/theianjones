"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ENGINE_INIT_PRESETS = void 0;
const common_all_1 = require("@dendronhq/common-all");
const fileUtils_1 = require("../../fileUtils");
const utilsv2_1 = require("../../utilsv2");
const notes_1 = require("../notes");
const fs_extra_1 = __importDefault(require("fs-extra"));
const common_server_1 = require("@dendronhq/common-server");
const path_1 = __importDefault(require("path"));
const utils_1 = require("./utils");
const lodash_1 = __importDefault(require("lodash"));
const schemas_1 = require("../schemas");
const SCHEMAS = {
    BASICS: new utilsv2_1.TestPresetEntryV4(async ({ engine }) => {
        const fname = schemas_1.SCHEMA_PRESETS_V4.SCHEMA_SIMPLE.fname;
        const schema = engine.schemas[fname];
        return [
            {
                actual: lodash_1.default.size(schema.schemas),
                expected: 2,
            },
        ];
    }, {
        preSetupHook: utils_1.setupBasic,
    }),
    BAD_SCHEMA: new utilsv2_1.TestPresetEntryV4(async ({ engine, initResp }) => {
        var _a;
        const schemas = lodash_1.default.keys(engine.schemas);
        return [
            {
                actual: schemas.sort(),
                expected: ["foo", "root"],
                msg: "bad schema not included",
            },
            { actual: (_a = initResp.error) === null || _a === void 0 ? void 0 : _a.code, expected: common_all_1.ERROR_CODES.MINOR },
        ];
    }, {
        preSetupHook: async ({ vaults, wsRoot }) => {
            const vault = vaults[0];
            await utils_1.setupBasic({ vaults, wsRoot });
            await schemas_1.SCHEMA_PRESETS_V4.BAD_SCHEMA.create({ vault, wsRoot });
        },
    }),
};
const NOTES = {
    DOMAIN_STUB: new utilsv2_1.TestPresetEntryV4(async ({ wsRoot, vaults, engine }) => {
        const noteRoot = common_all_1.NoteUtilsV2.getNoteByFnameV4({
            fname: "root",
            notes: engine.notes,
            vault: vaults[0],
        });
        const noteChild = common_all_1.NoteUtilsV2.getNoteByFnameV4({
            fname: "foo",
            notes: engine.notes,
            vault: vaults[0],
        });
        const checkVault = await fileUtils_1.FileTestUtils.assertInVault({
            wsRoot,
            vault: vaults[0],
            match: ["foo.ch1.md"],
            nomatch: ["foo.md"],
        });
        return [
            {
                actual: noteRoot.children,
                expected: [noteChild.id],
            },
            {
                actual: checkVault,
                expected: true,
            },
        ];
    }, {
        preSetupHook: async ({ vaults, wsRoot }) => {
            await notes_1.NOTE_PRESETS_V4.NOTE_SIMPLE_CHILD.create({
                wsRoot,
                vault: vaults[0],
            });
        },
    }),
    NOTE_WITH_CUSTOM_ATT: new utilsv2_1.TestPresetEntryV4(async ({ vaults, engine }) => {
        const noteRoot = common_all_1.NoteUtilsV2.getNoteByFnameV4({
            fname: "foo",
            notes: engine.notes,
            vault: vaults[0],
        });
        return [
            {
                actual: noteRoot.fname,
                expected: "foo",
            },
            {
                actual: noteRoot.custom,
                expected: { bond: 42 },
            },
        ];
    }, {
        preSetupHook: async ({ vaults, wsRoot }) => {
            await notes_1.NOTE_PRESETS_V4.NOTE_WITH_CUSTOM_ATT.create({
                wsRoot,
                vault: vaults[0],
            });
        },
    }),
    BAD_PARSE: new utilsv2_1.TestPresetEntryV4(async ({ initResp }) => {
        var _a;
        return [
            {
                actual: (_a = initResp.error) === null || _a === void 0 ? void 0 : _a.status,
                expected: common_all_1.ENGINE_ERROR_CODES.BAD_PARSE_FOR_NOTE,
            },
        ];
    }, {
        preSetupHook: async ({ vaults, wsRoot }) => {
            const vault = vaults[0];
            const vpath = common_server_1.vault2Path({ vault, wsRoot });
            fs_extra_1.default.writeFileSync(path_1.default.join(vpath, "foo.md"), "---\nbar:\n--\nfoo");
        },
    }),
};
exports.ENGINE_INIT_PRESETS = {
    NOTES,
    SCHEMAS,
};
//# sourceMappingURL=init.js.map